return
{
    AIControl = {
        childs = {
            active = {
                args = "",
                description = "激活状态",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            addHatred = {
                args = "(objID, value)参数1:number objID 目标objID; 参数2:number value 仇恨值",
                description = "目标增加仇恨值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            aiData = {
                args = "(key)any key 键",
                description = "通过键值获取AI数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            calcPosYaw = {
                args = "(pos)Vector3 pos 目标点",
                description = "获得控制实体与目标点间向量的方向",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            canSeeEnemy = {
                args = "(enemy)entity enemy 目标对象",
                description = "判断能否看到目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            canSeeEntity = {
                args = "(target)Entity target 目标实体",
                description = "获得控制实体能否看到目标实体的布尔值",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            chaseNearTarget = {
                args = "",
                description = "追踪附近目标",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            chaseTarget = {
                args = "",
                description = "追踪目标",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            clearHatred = {
                args = "(objID)number objID 目标objID",
                description = "清除AI的一个目标仇恨值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            enableTargetPos = {
                args = "",
                description = "能否能够到达目标地点",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            face2Pos = {
                args = "(pos)Vector3 pos 朝向目标点",
                description = "朝向目标点",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getAIChaseDis = {
                args = "",
                description = "得到追踪距离",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getEnemy = {
                args = "()",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getEntitiesInSight = {
                args = "()",
                description = "获得所有在控制实体视野内的实体",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getEntity = {
                args = "()",
                description = "获得AI控制器所控制的实体",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
            getFollowTarget = {
                args = "",
                description = "得到跟随目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getHomePos = {
                args = "()",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getHomeSize = {
                args = "()",
                description = "得到家园范围大小",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getMachine = {
                args = "",
                description = "得到AI驱动器",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getMaxHatredEntity = {
                args = "",
                description = "得到仇恨值最大的目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getNearPlayer = {
                args = "(range)float range 最小范围,不考虑距离超过该数值的玩家",
                description = "获得距离控制实体最近的玩家",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getNearestEnemy = {
                args = "",
                description = "获得附近的仇恨目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getTargetPos = {
                args = "",
                description = "得到AI移动目标点",
                returns = "",
                type = "function",
                valuetype = "",
            },
            isActive = {
                args = "()",
                description = "判断AI是否活跃",
                returns = "",
                type = "function",
                valuetype = "",
            },
            maxVisualDis = {
                args = "",
                description = "视野距离",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            nextChaseInterval = {
                args = "",
                description = "追踪间隔",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            setActiveStatus = {
                args = "(isActive)boolean isActive 所需设置的激活状态",
                description = "设置AI控制器是否活动",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setAiData = {
                args = "(key, value)参数1:any key 键; 参数2:any value 值",
                description = "设置AI数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setChaseTarget = {
                args = "(target)entity target 目标对象",
                description = "设置追逐目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setFollowTarget = {
                args = "(entity)entity entity 跟随目标entity",
                description = "设置跟随目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setTargetPos = {
                args = "(pos, enable)参数1:Vector3 pos 目标点; 参数2:boolean enable 是否立即往目标点移动",
                description = "设置AI移动目标点",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setTargetPosArray = {
                args = "(cfg)table cfg 路径点数组,根据index依次寻路",
                description = "设置寻路路径点的数组",
                returns = "",
                type = "function",
                valuetype = "",
            },
            skillMinAttackDis = {
                args = "",
                description = "最小攻击距离",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            start = {
                args = "",
                description = "启动AI",
                returns = "",
                type = "function",
                valuetype = "",
            },
            stop = {
                args = "",
                description = "停止AI",
                returns = "",
                type = "function",
                valuetype = "",
            },
            targetPos = {
                args = "",
                description = "获得AI控制器当前目标地点",
                returns = "Vector3",
                type = "value",
                valuetype = "Vector3",
            },
            visualAngle = {
                args = "",
                description = "视野角度",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
        },
        type = "class",
    },
    AIEvaluator = {
        childs = {
            CanAttackEnemy = {
                args = "(control)control control ai控制器",
                description = "可不可以攻击目标，进入技能攻击状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            HasEnemy = {
                args = "(control)control control ai控制器",
                description = "存不存在目标，进入追逐状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            HasTargetPos = {
                args = "(control)control control ai控制器",
                description = "有没有移动目标点，进入移动状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            InHomeArea = {
                args = "(control)control control ai控制器",
                description = "在不在家园活动范围内",
                returns = "",
                type = "function",
                valuetype = "",
            },
            Random = {
                args = "(control)control control ai控制器",
                description = "进入随机走动状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ShouldFollowEntity = {
                args = "(control)control control ai控制器",
                description = "是不是应该跟随entity, 进入跟随状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ShouldGoHome = {
                args = "(control)control control ai控制器",
                description = "进入回到家园点状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            canMoveRoute = {
                args = "(control)control control ai控制器",
                description = "可不可以走固定路线，进入固定移动路线状态的评估函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateAttack = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            onEvent = {
                args = "(event, ...)参数1:TODO event TODO; 参数2:TODO ... TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateBase = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getEntity = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            init = {
                args = "(control)TODO control TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            onEvent = {
                args = "(event, ...)参数1:TODO event TODO; 参数2:TODO ... TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateChase = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateFixedRoute = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            onEvent = {
                args = "(event, ...)参数1:TODO event TODO; 参数2:TODO ... TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateFollowEntity = {
        childs = {
            checkDecelerate = {
                args = "(control, disSqr)参数1:TODO control TODO; 参数2:TODO disSqr TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getDisSqrTarget = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getFollowTarget = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getTargetPos = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            onEvent = {
                args = "(event, ...)参数1:TODO event TODO; 参数2:TODO ... TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            transferTarget = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateGoHome = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateIdle = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateMachine = {
        childs = {
            addState = {
                args = "(state)AIState state AI状态",
                description = "添加状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addTransition = {
                args = "(from, to, evaluator)参数1:AIState from AIState; 参数2:AIState to AIState; 参数3:function evaluator 转移达成条件函数",
                description = "添加状态转移，从某个状态转移到另一个状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
            close = {
                args = "",
                description = "关闭驱动器的运行",
                returns = "",
                type = "function",
                valuetype = "",
            },
            create = {
                args = "(control)AIControl control AI控制器",
                description = "创建AI状态驱动器",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getCurState = {
                args = "",
                description = "得到当前属于什么状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getLastState = {
                args = "",
                description = "得到上一个状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getState = {
                args = "(stateName)string stateName 状态名字",
                description = "得到状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateMoveTo = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AIStateRandMove = {
        childs = {
            enter = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            exit = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
            update = {
                args = "()TODO  TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    AsyncProcess = {
        childs = {
            GetUserDetail = {
                args = "(userId, func)参数1:int userId 用户平台Id; 参数2:function func 用户数据作为参数的回调函数",
                description = "请求用户信息",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    BigInteger = {
        childs = {
            Create = {
                args = "(data, bit)参数1:string/number data 当没有bit参数时，这表示一个传入一个普通数; 参数2:number bit 位数，即在data后添加多少个0",
                description = "创建一个大数",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            Recover = {
                args = "(data)table data 传入一个丢失元表信息的大数table，恢复元表信息（当一个大数通过网络通讯后，会丢失metatable信息,失去元表信息的大数无法做元方法运算）",
                description = "元表恢复函数",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            __add = {
                args = "(integer1, integer2)参数1:number/table integer1 加号左侧数字; 参数2:number/table integer2 加号右侧数字",
                description = "加法元方法",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            __concat = {
                args = "(arg1, arg2)参数1:table/string arg1 左值; 参数2:table/string arg2 右值",
                description = "..元方法",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            __div = {
                args = "(number1, number2)参数1:table/number number1 左值; 参数2:table/number number2 右值",
                description = "除法元方法",
                returns = "table/number",
                type = "function",
                valuetype = "table/number",
            },
            __eq = {
                args = "(integer1, integer2)参数1:table integer1 左值; 参数2:table integer2 右值",
                description = "==元方法，lua语言特效导致只能对两个大数相比，如果左右值类型不同会永远返回false",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __le = {
                args = "(integer1, integer2)参数1:table/number integer1 左值; 参数2:table/number integer2 右值",
                description = "<=元方法",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __lt = {
                args = "(integer1, integer2)参数1:table/number integer1 左值; 参数2:table/number integer2 右值",
                description = "<元方法",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __mul = {
                args = "(number1, number2)参数1:table/number number1 左值; 参数2:table/number number2 右值",
                description = "乘法元方法（大数乘大数未支持）",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            __sub = {
                args = "(integer1, integer2)参数1:number/table integer1 减号左侧数字; 参数2:number/table integer2 减号右侧数字",
                description = "减法元方法",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            __tostring = {
                args = "(self)table self 传入一个大数，输出格式化的string",
                description = "转为string元方法",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            __unm = {
                args = "(integer1)table integer1 需要进行取反操作的表",
                description = "取反元方法",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            assign = {
                args = "(other)弃用 other 弃用",
                description = "弃用",
                returns = "",
                type = "function",
                valuetype = "",
            },
            clone = {
                args = "()TODO  TODO",
                description = "复制一个大数，仅在=元方法中内部调用",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            debugFullFormat = {
                args = "()TODO  TODO",
                description = "调试输出，即打印出所有位数",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            format = {
                args = "()TODO  TODO",
                description = "格式化输出，仅在tostring元方法中调用",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            loadFromString = {
                args = "(str)string str 传入一个用来转化为大数的string，仅供内部调用",
                description = "string转化大数（内部方法）",
                returns = "",
                type = "function",
                valuetype = "",
            },
            tryLoadFromDesignFormat = {
                args = "(str)string str 以逗号分隔开的两个整数",
                description = "尝试以‘2,5’格式解析出一个大数",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
        },
        type = "class",
    },
    Block = {
        childs = {
            GetAirBlockName = {
                args = "()",
                description = "获取空气方块的名称",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            GetIdCfg = {
                args = "(id)int id 方块Id",
                description = "通过方块的id获取方块的配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            GetNameCfg = {
                args = "(name)string name 方块名称",
                description = "通过方块名称获取方块的配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            GetNameCfgId = {
                args = "(name)string name 方块名称",
                description = "通过方块名称获取方块Id",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
        },
        type = "class",
    },
    Blockman = {
        childs = {
            Instance = {
                args = "()",
                description = "获得Blockman的单例实例",
                returns = "Blockman",
                type = "function",
                valuetype = "Blockman",
            },
            addBetweenEffect = {
                args = "(templateName, position, endPos, duration)参数1:string templateName 特效名称; 参数2:Vector3 position 起始坐标; 参数3:Vector3 endPos 结束坐标; 参数4:int duration 持续时间",
                description = "添加两点之间特效",
                returns = "",
                type = "function",
                valuetype = "",
            },
            changeCameraCfg = {
                args = "(config, modeViewIndex)参数1:cameraCfg config 需要改的配置; 参数2:int modeViewIndex 对应的索引值",
                description = "更改摄像机的配置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            changeCameraView = {
                args = "(pos, yaw, pitch, distance, smooth)参数1:Vector3 pos 当前摄像机的位置; 参数2:float yaw 偏航角度; 参数3:float pitch 俯仰角度; 参数4:float distance 距离长度; 参数5:float smooth 流畅度",
                description = "更改摄像机的视角",
                returns = "",
                type = "function",
                valuetype = "",
            },
            control = {
                args = "()",
                description = "返回玩家控制器实例",
                returns = "PlayerControl",
                type = "function",
                valuetype = "PlayerControl",
            },
            delEffect = {
                args = "(templateName, position)参数1:string templateName 特效名称; 参数2:Vector3 position 特效的位置",
                description = "删除特效",
                returns = "",
                type = "function",
                valuetype = "",
            },
            gameSettings = {
                args = "",
                description = "游戏设置",
                returns = "GameSettings",
                type = "value",
                valuetype = "GameSettings",
            },
            getCameraInfo = {
                args = "(viewIndex)int viewIndex 视图索引值",
                description = "获取摄像机的视角视图信息",
                returns = "cameraCfg",
                type = "function",
                valuetype = "cameraCfg",
            },
            getClickPos = {
                args = "()",
                description = "获得点击位置",
                returns = "Vector2",
                type = "function",
                valuetype = "Vector2",
            },
            getClosestRayTraceResult = {
                args = "(startPos, endPos, rayLength)参数1:Vector3 startPos 光线开始的位置; 参数2:Vector3 endPos 光线结束的位置; 参数3:float rayLength 光线长度",
                description = "获取最近的光线追踪结果",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getHitInfo = {
                args = "()",
                description = "获得操作所指向的对象信息",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getPersonView = {
                args = "()",
                description = "获取玩家人称视角",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getRayResultBetweenPosAndScreen = {
                args = "(pos, screenPos, rayLength)参数1:Vector3 pos 目标点的位置; 参数2:Vector2 screenPos 屏幕点的位置; 参数3:float rayLength 光线长度",
                description = "获取射线在屏幕点与目标点之间扫过的结果",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getRayTraceResult = {
                args = "(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)参数1:Vector2 screenPos 屏幕坐标; 参数2:float rayLength 射线长度; 参数3:boolean isNeedLogicPositinToScreenPosition 是否需要将逻辑坐标转化为屏幕坐标; 参数4:boolean getHitEffectRelated 是否返回与检测到的结果有关信息; 参数5:boolean getTrajectoryEffectRelated 是否返回与射线轨道有关信息; 参数6:table ignoreObjIds 需要忽略检测的对象Id表",
                description = "由屏幕坐标位置进行射线检测并返回检测结果",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getScreenPos = {
                args = "(position)Vector3 position 世界坐标位置",
                description = "获取屏幕坐标",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getScreenSize = {
                args = "()",
                description = "获取屏幕大小",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getUserAction = {
                args = "()",
                description = "获得玩家操作信息",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            playEffectByPos = {
                args = "(templateName, position, yaw, duration, scale)参数1:string templateName 特效的名称; 参数2:Vector3 position 特效播放的位置; 参数3:float yaw 偏航角; 参数4:int duration 持续时间; 参数5:Vector3 scale 缩放值",
                description = "在某一位置上播放特效",
                returns = "",
                type = "function",
                valuetype = "",
            },
            player = {
                args = "",
                description = "玩家实体",
                returns = "Player",
                type = "value",
                valuetype = "Player",
            },
            setCanSwitchView = {
                args = "(enable)boolean enable 是否允许切换人称视角",
                description = "设置是否允许切换人称视角",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setPersonView = {
                args = "(view)int view 第几人称",
                description = "设置玩家的人称视角",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setReachDistance = {
                args = "(distance)float distance 距离长度",
                description = "设置要到达的距离",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setViewEntity = {
                args = "(entity)Entity entity 实体对象",
                description = "设置客户端观察的实体对象",
                returns = "",
                type = "function",
                valuetype = "",
            },
            switchPersonView = {
                args = "()",
                description = "切换玩家的人称视角",
                returns = "",
                type = "function",
                valuetype = "",
            },
            toScreenClickPos = {
                args = "(pos)Vector2 pos 指定坐标",
                description = "将指定坐标转换成屏幕坐标",
                returns = "Vector2",
                type = "function",
                valuetype = "Vector2",
            },
            trajectoryEffect = {
                args = "(templateName, position, pitch, yaw, roll, duration, extendName)参数1:string templateName 特效名称; 参数2:Vector3 position 特效的位置; 参数3:float pitch 俯仰角; 参数4:float yaw 偏航角; 参数5:float roll 翻滚角; 参数6:int duration 持续时间; 参数7:string extendName 扩展名称",
                description = "特效轨迹",
                returns = "",
                type = "function",
                valuetype = "",
            },
            viewEntity = {
                args = "()",
                description = "返回客户端观察的实体对象",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
            world = {
                args = "",
                description = "客户端world实例",
                returns = "World",
                type = "value",
                valuetype = "World",
            },
        },
        type = "class",
    },
    CGame = {
        childs = {
            Instance = {
                args = "()",
                description = "获得CGame实例",
                returns = "CGame",
                type = "function",
                valuetype = "CGame",
            },
            exitGame = {
                args = "(params)string params 游戏退出的语句",
                description = "判断是否执行退出游戏",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getGameRootDir = {
                args = "()",
                description = "获取游戏的根目录",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getPlatformId = {
                args = "()",
                description = "获取平台id",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getPlatformUserId = {
                args = "()",
                description = "获取平台用户的id号",
                returns = "ui64",
                type = "function",
                valuetype = "ui64",
            },
            getPlatformUserName = {
                args = "()",
                description = "获取平台用户的名称",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getWndSize = {
                args = "()",
                description = "获得游戏窗口的大小",
                returns = "Vector2",
                type = "function",
                valuetype = "Vector2",
            },
            showTipsInLoadingPage = {
                args = "(tips, needShowExitGameDialog)参数1:string tips 加载时的提示语句; 参数2:boolean needShowExitGameDialog 是否需要显示退出游戏的面板",
                description = "加载页面时显示提示语",
                returns = "",
                type = "function",
                valuetype = "",
            },
            toggleDebugMessageShown = {
                args = "(shown)boolean shown 是否显示",
                description = "显示调试信息",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Color3 = {
        childs = {
            b = {
                args = "",
                description = "颜色的蓝色值",
                returns = "number",
                type = "value",
                valuetype = "number",
            },
            fromRGB = {
                args = "(red, green, blue)参数1:number red 颜色的红色值，参数范围[0, 255]; 参数2:number green 颜色的绿色值，参数范围[0, 255]; 参数3:number blue 颜色的蓝色值，参数范围[0, 255]",
                description = "返回给定的红色，绿色和蓝色值的color3",
                returns = "Color3",
                type = "function",
                valuetype = "Color3",
            },
            g = {
                args = "",
                description = "颜色的绿色值",
                returns = "number",
                type = "value",
                valuetype = "number",
            },
            new = {
                args = "(red, green, blue)参数1:number red 颜色的红色值，参数范围[0, 1]; 参数2:number green 颜色的绿色值，参数范围[0, 1]; 参数3:number blue 颜色的蓝色值，参数范围[0, 1]",
                description = "返回给定的红色，绿色和蓝色值的color3",
                returns = "Color3",
                type = "function",
                valuetype = "Color3",
            },
            r = {
                args = "",
                description = "颜色的红色值",
                returns = "number",
                type = "value",
                valuetype = "number",
            },
        },
        type = "class",
    },
    DBHandler = {
        childs = {
            getDataByUserId = {
                args = "(userId, dataKey, callback, failback)参数1:int userId 玩家平台Id; 参数2:int dataKey 存储数据的标记; 参数3:function callback 存储数据作为参数的回调函数; 参数4:function failback 存储数据访问失败的回调函数",
                description = "请求存储数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setData = {
                args = "(userId, dataKey, data, immediately)参数1:int userId 玩家平台Id; 参数2:int dataKey 存储数据的标记; 参数3:string data 需要存储的数据; 参数4:boolean immediately 是否需要立即存储",
                description = "设置存储数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    DebugDraw = {
        childs = {
            Instance = {
                args = "()",
                description = "获得DebugDraw实例",
                returns = "DebugDraw",
                type = "function",
                valuetype = "DebugDraw",
            },
            addEntry = {
                args = "(flagName, renderFunc)参数1:string flagName 自定义新增渲染条目的名称; 参数2:function renderFunc 对应新增的条目，画出并渲染出具体的外观",
                description = "添加一个渲染条目",
                returns = "",
                type = "function",
                valuetype = "",
            },
            drawAABB = {
                args = "(min, max, color)参数1:Vector3 min AABB盒的最小点位置; 参数2:Vector3 max AABB盒的最大点位置; 参数3:uint32_t color 此时AABB盒中当前位置的颜色值",
                description = "画出AABB盒",
                returns = "",
                type = "function",
                valuetype = "",
            },
            drawCircle = {
                args = "(center, radius, normal, color)参数1:Vector3 center 圆心的位置; 参数2:float radius 圆的半径大小; 参数3:Vector3 normal 法线的指向; 参数4:uint32_t color 圆边的颜色值",
                description = "画一个圆，圆边是由多个小线段首尾连接而成",
                returns = "",
                type = "function",
                valuetype = "",
            },
            drawLine = {
                args = "(from, to, color)参数1:Vector3 from 记录线的开头点的具体位置; 参数2:Vector3 to 记录线的末位点的具体位置; 参数3:uint32_t color 描述此时的颜色值",
                description = "画一条线",
                returns = "",
                type = "function",
                valuetype = "",
            },
            drawSphere = {
                args = "(center, radius, color)参数1:Vector3 center 球心的位置; 参数2:float radius 球半径的大小; 参数3:uint32_t color 球中经纬线的颜色值",
                description = "画一个球体",
                returns = "",
                type = "function",
                valuetype = "",
            },
            drawTriangle = {
                args = "(vertex1, vertex2, vertex3, color)参数1:Vector3 vertex1 三角形第一个顶点的位置; 参数2:Vector3 vertex2 三角形第二个顶点的位置; 参数3:Vector3 vertex3 三角形第三个顶点的位置; 参数4:uint32_t color 三角形当前边的颜色值",
                description = "画一个三角形，由三个顶点通过线段连接而成",
                returns = "",
                type = "function",
                valuetype = "",
            },
            isDrawColliderEnabled = {
                args = "()",
                description = "判断碰撞体显示是否启动",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isDrawRegionEnabled = {
                args = "()",
                description = "判断区域显示是否启动",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isEnabled = {
                args = "()",
                description = "判断绘制的渲染是否启动",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            setDrawColliderEnabled = {
                args = "(enabled)boolean enabled 是否启动",
                description = "设置是否开启碰撞体的显示",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setDrawRegionEnabled = {
                args = "(enabled)boolean enabled 是否启动",
                description = "设置是否开启区域的显示",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnabled = {
                args = "(value)boolean value 是否启动",
                description = "设置是否启动绘制的显示",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setLineWidth = {
                args = "(width)float width 设置线条宽度值的大小",
                description = "设置线条的宽度",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Define = {
        childs = {
            TRAY_CLASS_BAG = {
                args = "",
                description = "容器背包类型",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
            TRAY_CLASS_EQUIP = {
                args = "",
                description = "装备背包类型",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
        },
        type = "class",
    },
    Entity = {
        childs = {
            GetCfg = {
                args = "(cfgName)string cfgName 配置名称",
                description = "获取实体对象的配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            addEffect = {
                args = "(name, effectName, once, pos, yaw, scale, socketName)参数1:string name 名称，作为删除时使用的键值; 参数2:string effectName 特效名称; 参数3:boolean once 播放一次; 参数4:Vector3 pos 位置; 参数5:float yaw yaw轴旋转; 参数6:Vector3 scale 缩放比例; 参数7:string socketName 插槽名称",
                description = "在实体对象添加播放特效",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addExp = {
                args = "(exp, reason)参数1:int  exp 经验; 参数2:string reason 理由",
                description = "增加经验",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addHp = {
                args = "(hp)float hp 增加的血量值，若传值为负数则为减少血量",
                description = "增加服务端实体的血量值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            addItem = {
                args = "(fullName, count, proc, reason)参数1:string fullName 道具名称; 参数2:int count 数量; 参数3:function proc 回调函数; 参数4:string reason 理由",
                description = "添加道具",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addValueDef = {
                args = "(key, init, toSelf, toOther, saveDB, client)参数1:string key 键; 参数2:variant init 初始值; 参数3:boolean toSelf 是否同步到自己客户端; 参数4:boolean toOther 是否同步到其他用户客户端; 参数5:boolean saveDB 是否存盘; 参数6:boolean client 客户端能否进行修改",
                description = "添加值定义",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addValueFunc = {
                args = "(key, func)参数1:string key 键; 参数2:function func 回调函数",
                description = "注册值定义的值发生改变时的回调函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addVp = {
                args = "(vp)float vp 增加的饥饿值，若传值为负数则为减少饥饿值",
                description = "增加服务端实体的饥饿值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            applySkin = {
                args = "(skin)SkinData skin 皮肤数据",
                description = "应用皮肤",
                returns = "",
                type = "function",
                valuetype = "",
            },
            changeActor = {
                args = "(actorName, clearSkin)参数1:string actorName 模型名; 参数2:boolean clearSkin 是否清除皮肤",
                description = "改变模型",
                returns = "",
                type = "function",
                valuetype = "",
            },
            changeFlyMode = {
                args = "(mode)float mode 模式系数",
                description = "改变实体飞行模式系数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            changeSkin = {
                args = "(skinData)SkinData skinData 皮肤数据",
                description = "改变皮肤",
                returns = "",
                type = "function",
                valuetype = "",
            },
            curBlockPos = {
                args = "()",
                description = "获得当前实体所占的方块位置",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            curHp = {
                args = "",
                description = "实体当前的血量数值,为0时实体进入死亡状态",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            curVp = {
                args = "",
                description = "实体当前的饥饿度数值",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            delEffect = {
                args = "(name, smooth)参数1:string name 名称，添加特效时的第一个参数name; 参数2:boolean smooth 是否渐变消失，若为false特效立即消失",
                description = "从实体对象上删除特效",
                returns = "",
                type = "function",
                valuetype = "",
            },
            doHurt = {
                args = "(motion)Vector3 motion 位移向量",
                description = "受击，当前实体受到攻击，产生位移，进入受击状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
            doHurtRepel = {
                args = "(vector)Vector3 vector 位移向量",
                description = "使实体进入受击状态并指定位移的向量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            face2Pos = {
                args = "(pos)Vector3 pos 坐标",
                description = "面朝指定坐标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            fallingAction = {
                args = "",
                description = "坠落时状态机",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
            getActionTimeScale = {
                args = "(action)string action 动作名",
                description = "获取实体指定动作的播放速度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getActorName = {
                args = "()",
                description = "获得当前实体对象的Actor名称",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getActorPause = {
                args = "()",
                description = "获取实体动作是否处于暂停（冻结状态）",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            getBaseAction = {
                args = "()",
                description = "获得当前实体对象的基础动作",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getBaseActionScale = {
                args = "()",
                description = "获取实体动作整体的播放速度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getBodyTurnSpeed = {
                args = "()",
                description = "获得当前实体转身速度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getBodyYaw = {
                args = "()",
                description = "获得实体对象的yaw轴朝向",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getCollidableUnderfootObjId = {
                args = "()",
                description = "获得当前实际踩着的对象的ID",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getEyePos = {
                args = "()",
                description = "返回眼部坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getFrontPos = {
                args = "(dis, isFoot, bCenter)参数1:float dis 前方距离; 参数2:boolean isFoot 是否以脚部为准; 参数3:boolean bCenter 是否取中间值",
                description = "获取对象前方坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getHandItem = {
                args = "()",
                description = "获取手持道具",
                returns = "item",
                type = "function",
                valuetype = "item",
            },
            getHoldModelARGBStrength = {
                args = "()",
                description = "获得持拿物品模型的ARGB增强系数",
                returns = "Color",
                type = "function",
                valuetype = "Color",
            },
            getInvisible = {
                args = "()",
                description = "获得当前实体对象是否隐形",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            getNearbyEntities = {
                args = "(maxDistance, filter)参数1:float maxDistance 检查距离; 参数2:function filter 过滤函数",
                description = "返回附近的实体对象列表",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getPrevBaseAction = {
                args = "()",
                description = "获得当前实体对象的上一个基础动作",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getPrevUpperAction = {
                args = "()",
                description = "获得当前实体对象的上一个高级动作",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getRebirthPos = {
                args = "()",
                description = "获取重生坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getShowHpColor = {
                args = "()",
                description = "获得血量值的进度条UI颜色",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getSpeed = {
                args = "()",
                description = "获得当前实体的当前移动速度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getTeam = {
                args = "()",
                description = "获取实体对象的队伍实例",
                returns = "Team",
                type = "function",
                valuetype = "Team",
            },
            getUpperAction = {
                args = "()",
                description = "获得当前实体对象的高级动作",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            isActionInTimeScaleMap = {
                args = "(action)string action 动作名",
                description = "返回指定动作是否设置了播放速度",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isActorAnimRewind = {
                args = "()",
                description = "获取实体的动作是否处于倒放模式",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isCameraMode = {
                args = "()",
                description = "获得当前是否为相机模式",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isClimbing = {
                args = "()",
                description = "获得正在攀爬的方块的坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            isControl = {
                args = "()",
                description = "当前实体是否被玩家控制",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isDead = {
                args = "()",
                description = "获得当前实体对象是否为死亡状态",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isFlying = {
                args = "",
                description = "是否在空中",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isMoving = {
                args = "",
                description = "当前实体是否在移动。骑乘与搭乘状态下，由于骑乘对象或搭乘对象造成的位移不算作当前实体的移动",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isSwimming = {
                args = "()",
                description = "是否正在游泳",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            jump = {
                args = "(x, z)参数1:int x 当前移动向量的x数值; 参数2:int z 当前移动向量的z数值",
                description = "跳跃",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            kill = {
                args = "(from, cause)参数1:Entity from 击杀来源实体实例; 参数2:strin cause 击杀来源描述",
                description = "击杀实体对象",
                returns = "",
                type = "function",
                valuetype = "",
            },
            movingStyle = {
                args = "",
                description = "不同移动方式代表不同的移动速度, 0正常, 1步行, 2冲刺",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            name = {
                args = "",
                description = "名称",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
            onGround = {
                args = "",
                description = "是否在地面上",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            owner = {
                args = "()",
                description = "返回对象的拥有者",
                returns = "Object",
                type = "function",
                valuetype = "Object",
            },
            parserBubbleMsg = {
                args = "(packet)TextTable packet 文本包",
                description = "显示多语言拼接后的气泡显示",
                returns = "",
                type = "function",
                valuetype = "",
            },
            play3dSound = {
                args = "(filename, isLoop)参数1:string filename 音频文件名; 参数2:boolean isLoop 是否循环播放，若为true则循环播放",
                description = "播放音效",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            prop = {
                args = "(key)string key 属性字段",
                description = "获取实体属性",
                returns = "variant",
                type = "function",
                valuetype = "variant",
            },
            refreshBaseAction = {
                args = "()",
                description = "重置全身动作",
                returns = "",
                type = "function",
                valuetype = "",
            },
            refreshUpperAction = {
                args = "()",
                description = "刷新实体对象的高级动作",
                returns = "",
                type = "function",
                valuetype = "",
            },
            removeActionMapping = {
                args = "(action)string action 擦除的键",
                description = "从当前实体对象的动作字典擦除键",
                returns = "",
                type = "function",
                valuetype = "",
            },
            removeActionTimeScale = {
                args = "(action)string action 动作名",
                description = "移除实体指定动作的播放速度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            serverRebirth = {
                args = "(map, pos, yaw, pitch)参数1:Map map 地图; 参数2:Vector3 pos 坐标; 参数3:float yaw yaw朝向角度; 参数4:float pitch pitch轴的角度",
                description = "重生",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActionMapping = {
                args = "(actionSrc, actionDst)参数1:string actionSrc 字典钥匙; 参数2:string actionDst 字典值",
                description = "在当前实体对象的动作字典上插入新值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActionTimeScale = {
                args = "(action, scale)参数1:string action 动作名; 参数2:float scale 播放速度",
                description = "设置实体指定动作的播放速度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorAnimRewind = {
                args = "(rewind)boolean rewind 是否倒放",
                description = "设置实体的动作是否倒放",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorPause = {
                args = "(isPause)boolean isPause 是否暂停",
                description = "设置实体动作暂停（冻结状态）",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorScale = {
                args = "(scale)Vector3 scale 缩放比例",
                description = "设置实体对象Actor的缩放比例",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setAlpha = {
                args = "(alpha, time)参数1:float alpha Alpha通道; 参数2:int time 渐变时间，单位为tick数",
                description = "设置实体对象Actor的Alpha通道",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setAlwaysAction = {
                args = "(actionName)string actionName 动作名称",
                description = "设置常驻动作，当实体对象没有进行其他动作时，使用该动作",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBaseAction = {
                args = "(action)string action 动作名称",
                description = "设置当前实体对象的基础动作",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBaseActionScale = {
                args = "(scale)float scale 速度",
                description = "设置实体动作整体的播放速度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBodyTurnSpeed = {
                args = "(speed)float speed 转身速度，单位角度每帧",
                description = "设置当前实体转身速度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBodyYaw = {
                args = "(yaw)float yaw 朝向数值",
                description = "设置实体对象的yaw轴朝向",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setCameraMode = {
                args = "(isOpen)boolean isOpen 若为true，则进入相机模式，否则退出相机模式",
                description = "设置是否为相机模式",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEntityActorFlashEffect = {
                args = "(add)boolean add 是否开启",
                description = "设置模型的闪烁效果是否开启",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEntityHide = {
                args = "(hide)boolean hide 是否隐藏",
                description = "设置是否隐藏实体对象",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setGhost = {
                args = "(enable, color, interval, num)参数1:boolean enable 若为true，则客户端实体渲染残影特效; 参数2:Color color 颜色; 参数3:int interval 间隔; 参数4:int num 数量",
                description = "设置是否渲染客户端实体残影特效",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setGuideTarget = {
                args = "(targetPosition, texName, speed)参数1:Vector3 targetPosition 指引目标位置; 参数2:string texName 指引箭头文件名; 参数3:float speed 指引箭头速度",
                description = "设置指引信息，以坐标作为指引目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setGuideTarget1 = {
                args = "(targetEntity, texName, speed)参数1:Entity targetEntity 指引目标实体; 参数2:string texName 指引箭头文件名; 参数3:float speed 指引箭头速度",
                description = "设置指引信息，以实体作为指引目标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setHoldModelARGBStrength = {
                args = "(r, g, b, a)参数1:float r 红色; 参数2:float g 绿色; 参数3:float b 蓝色; 参数4:float a Alpha",
                description = "设置持拿物品模型的ARGB增强系数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setHp = {
                args = "(hp)float hp 血量值",
                description = "设置服务端实体的血量值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMapPos = {
                args = "(map, pos, yaw, pitch)参数1:Map map 地图; 参数2:Vector3 pos 坐标; 参数3:float yaw yaw朝向角度; 参数4:float pitch pitch轴的角度",
                description = "设置地图与坐标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setOverlayColor = {
                args = "(masterSlaveName, color)参数1:string masterSlaveName 身体部位; 参数2:Color color 颜色",
                description = "设置是否使用什么颜色覆盖替代样式",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setPlayerControl = {
                args = "(player)Entity player 指定实体",
                description = "设置控制指定服务端实体的玩家控制器",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setPos = {
                args = "(pos, yaw, pitch)参数1:Vector3 pos 坐标; 参数2:float yaw yaw朝向角度; 参数3:float pitch pitch轴的角度",
                description = "设置坐标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setProp = {
                args = "(key, value)参数1:string key 属性字段; 参数2:variant value 属性值",
                description = "设置实体属性",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setRebirthPos = {
                args = "(pos, map)参数1:Vector3 pos 重生坐标; 参数2:Map map 重生地图",
                description = "设置重生坐标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setShowHpColor = {
                args = "(color)int color 颜色十六进制代码",
                description = "设置实体对象显示血量值的进度条UI颜色，数值为0x十六进制的颜色代码。若为-1，则取用实体配置中的hpBarColor字段",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setShowName = {
                args = "(txt, font)参数1:string txt 文本内容; 参数2:string font 字体",
                description = "设置实体对象头顶显示的名称",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setUpperAction = {
                args = "(action)string action 动作名称",
                description = "设置当前实体对象的高级动作",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setUseOverlayColorReplaceMode = {
                args = "(masterSlaveName, isUse)参数1:string masterSlaveName 身体部位; 参数2:boolean isUse 若为true，则使用颜色覆盖替代样式",
                description = "设置是否使用颜色覆盖替代样式",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setValue = {
                args = "(key, value, noSync)参数1:string key 键; 参数2:variant value 值; 参数3:boolean noSync 禁用同步",
                description = "设置值定义的值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setVp = {
                args = "(vp)float vp 饥饿值",
                description = "设置服务端实体的饥饿值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            showHeadMessage = {
                args = "(txt)string txt 文本内容",
                description = "设置实体对象头顶聊天文本",
                returns = "",
                type = "function",
                valuetype = "",
            },
            takeDamage = {
                args = "(damage, from, isFormula, cause)参数1:int damage 伤害值; 参数2:Entity from 伤害来源实体实例; 参数3:boolean isFormula 是否启用默认伤害公式; 参数4:strin cause 伤害来源描述",
                description = "对实体对象进行伤害",
                returns = "",
                type = "function",
                valuetype = "",
            },
            tray = {
                args = "()",
                description = "返回装载背包实例的容器实例(不止一个背包)",
                returns = "EntityTrays",
                type = "function",
                valuetype = "EntityTrays",
            },
            updateUpperAction = {
                args = "(action, ticks, isResetAction)参数1:string action 动作名称; 参数2:int ticks 播放时长，单位为tick数。传值为-1时会尝试查找与参数action同名的技能，使用该技能时长作为播放时长; 参数3:boolean isResetAction 该参数目前无作用",
                description = "设置实体对象高级动作",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
        },
        type = "class",
    },
    EntityClient = {
        childs = {
            CreateClientEntity = {
                args = "(params)CreateParams params 创建参数",
                description = "创建客户端实体对象",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
        },
        type = "class",
    },
    EntityServer = {
        childs = {
            Create = {
                args = "(params, func)参数1:CreateParams params 创建参数; 参数2:function func 回调函数",
                description = "在服务端创建一个实体对象",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
        },
        type = "class",
    },
    EntityTrays = {
        childs = {
            add_tray = {
                args = "(tray)tray tray 背包实例",
                description = "添加背包实例",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            fetch_tray = {
                args = "(tid)int tid 背包id",
                description = "根据背包Id返回背包实例",
                returns = "tray",
                type = "function",
                valuetype = "tray",
            },
            find_item = {
                args = "(item_name)string item_name 道具名称",
                description = "根据道具名称返回道具实例",
                returns = "item",
                type = "function",
                valuetype = "item",
            },
            query_trays = {
                args = "(filter)function filter 背包作为参数的过滤函数",
                description = "根据过滤函数返回装有背包实例的表",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
        },
        type = "class",
    },
    Game = {
        childs = {
            CreateTeam = {
                args = "(id, additionalInfo)参数1:int id 队伍id; 参数2:variant additionalInfo 队伍附加信息",
                description = "创建队伍",
                returns = "Team",
                type = "function",
                valuetype = "Team",
            },
            GetAllPlayers = {
                args = "()",
                description = "获取游戏的所有玩家的数组",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            GetAllPlayersCount = {
                args = "()",
                description = "获取当前游戏的玩家数量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            GetGameTime = {
                args = "()",
                description = "获取当前游戏的游玩时间",
                returns = "",
                type = "function",
                valuetype = "",
            },
            GetPlayerByUserId = {
                args = "(userId)int userId 玩家的平台id",
                description = "通过玩家平台id获取当前游戏中该玩家的数据",
                returns = "Player",
                type = "function",
                valuetype = "Player",
            },
            GetService = {
                args = "(name)string name 服务名称",
                description = "获取服务",
                returns = "Instance",
                type = "function",
                valuetype = "Instance",
            },
            GetStartGamePlayerCount = {
                args = "()",
                description = "获取开始游戏时的玩家数量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            GetSurvivePlayers = {
                args = "()",
                description = "获取当前游戏存活的所有玩家",
                returns = "table ",
                type = "function",
                valuetype = "table ",
            },
            GetSurvivePlayersCount = {
                args = "()",
                description = "获取当前游戏存活的玩家数量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            GetTeam = {
                args = "(teamID)int teamID 队伍",
                description = "返回队伍实例",
                returns = "Team",
                type = "function",
                valuetype = "Team",
            },
            TriggersAll = {
                args = "(name)string name 事件名称",
                description = "触发当前游戏中的所有的entity的事件",
                returns = "",
                type = "function",
                valuetype = "",
            },
            TryJoinTeamByPlayer = {
                args = "(player, teamId)参数1:Player player 玩家; 参数2:int teamId 队伍id",
                description = "尝试加入指定队伍",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
        },
        type = "class",
    },
    GameSettings = {
        childs = {
            addActorLight = {
                args = "(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)参数1:Vector3 mainLightColor 主要灯光颜色; 参数2:Vector3 subLightColor 子灯光颜色; 参数3:Vector3 ambientLightColor 环境光颜色; 参数4:Vector3 brightness 亮度; 参数5:float time 进行的时间; 参数6:float transition 过渡期间",
                description = "添加角色灯光",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addLight = {
                args = "(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)参数1:Vector3 mainLightDir 主要灯光的方向; 参数2:Vector3 mainLightColor 主要灯光的颜色; 参数3:Vector3 subLightColor 子灯光的颜色; 参数4:Vector3 ambientLightColor 环境光的颜色; 参数5:Vector3 brightness 亮度; 参数6:float time 进行的时间; 参数7:float transition 过渡期间",
                description = "添加灯光",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addSky = {
                args = "(right, left, top, bottom, back, front, time, transition)参数1:string right 右部图片路径; 参数2:string left 左部图片路径; 参数3:string top 顶部图片路径; 参数4:string bottom 底部图片路径; 参数5:string back 后面图片路径; 参数6:string front 前面图片路径; 参数7:float time 天空盒存在时间; 参数8:float transition 切换至下一天空盒的渐变时间",
                description = "添加天空盒",
                returns = "",
                type = "function",
                valuetype = "",
            },
            beginMouseMove = {
                args = "(x, y)参数1:float x 移动前的x坐标; 参数2:float y 移动前的y坐标",
                description = "鼠标开始移动的位置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            bobbingCameraEffect = {
                args = "",
                description = "判断是否设置摄像机晃动效果",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            clearActorLight = {
                args = "()",
                description = "清除角色灯光",
                returns = "",
                type = "function",
                valuetype = "",
            },
            clearLight = {
                args = "()",
                description = "清除所有灯光",
                returns = "",
                type = "function",
                valuetype = "",
            },
            clearMousePos = {
                args = "()",
                description = "清除鼠标位置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            clearSky = {
                args = "()",
                description = "清除天空盒",
                returns = "",
                type = "function",
                valuetype = "",
            },
            endMouseMove = {
                args = "(x, y)参数1:float x 鼠标移动后x的位置; 参数2:float y 鼠标移动后y的位置",
                description = "鼠标结束移动的位置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getActorAmbientColor = {
                args = "()",
                description = "获取角色环境光颜色",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getActorBrightness = {
                args = "()",
                description = "获取角色亮度值",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getActorMainLightColor = {
                args = "()",
                description = "获取角色主要灯光颜色",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getActorSubLightColor = {
                args = "()",
                description = "获取角色子灯光颜色",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getAmbientColor = {
                args = "()",
                description = "获取环境光颜色",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getBloomDeviation = {
                args = "()",
                description = "获得泛光偏差值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getBloomIntensity = {
                args = "()",
                description = "获取泛光强度值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getBloomSaturation = {
                args = "()",
                description = "获得泛光饱和值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getBloomThreshold = {
                args = "()",
                description = "获取泛光阈值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getBrightness = {
                args = "()",
                description = "获取颜色亮度",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getCameraSensitive = {
                args = "()",
                description = "返回镜头移动的灵敏度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getEnableAntiAliasing = {
                args = "()",
                description = "获取启用反锯齿",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            getEnableBloom = {
                args = "()",
                description = "获得启用泛光",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            getEnableMotionBlur = {
                args = "()",
                description = "获取运动模糊",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            getEnableSpecular = {
                args = "()",
                description = "获取启动镜面反射",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getMainLightColor = {
                args = "()",
                description = "获取主灯光颜色",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getMainLightDir = {
                args = "()",
                description = "获取主灯光的方向",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getMotionBlurStrength = {
                args = "()",
                description = "获得运动模糊的强度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getSubLightColor = {
                args = "()",
                description = "获取子灯光颜色",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getWorldEffectVisualDistance = {
                args = "()",
                description = "返回特效显示的可见距离",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            hideCloud = {
                args = "",
                description = "判断是否隐藏云朵",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            hideFog = {
                args = "",
                description = "判断是否隐藏雾",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isLockBodyRotation = {
                args = "()",
                description = "判断是否锁定玩家身体随摄像机旋转",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isLockSlideScreen = {
                args = "()",
                description = "判断是否锁定滑动屏幕",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            loadCameraCfg = {
                args = "(config)cameraCfg config 配置表中加载",
                description = "加载相机配置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            poleForward = {
                args = "",
                description = "操纵杆前后的方向控制(>0:向前,<0:向后,=0不动)",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            poleStrafe = {
                args = "",
                description = "操纵杆左右的方向控制(>0:向左,<0:向右,=0不动)",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            setActorAmbientColor = {
                args = "(color)Vector3 color 灯光颜色值",
                description = "设置角色周围环境光的颜色",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorBrightness = {
                args = "(color)Vector3 color 灯光颜色值",
                description = "设置角色亮度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorMainLightColor = {
                args = "(color)Vector3 color 灯光颜色值",
                description = "设置角色主要灯光颜色",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorReceiveBlockLight = {
                args = "(val)boolean val 是否接收",
                description = "设置模型是否接收发光方块的光源",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setActorSubLightColor = {
                args = "(color)Vector3 color 灯光颜色值",
                description = "设置角色子灯光颜色",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setAmbientColor = {
                args = "(color)Vector3 color 环境光颜色",
                description = "设置环境光颜色",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBloomDeviation = {
                args = "(val)float val 偏差值",
                description = "设置泛光的偏差值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBloomIntensity = {
                args = "(val)float val 强度值",
                description = "设置泛光强度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBloomSaturation = {
                args = "(val)float val 饱和值",
                description = "设置泛光饱和度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBloomThreshold = {
                args = "(val)float val 阈值",
                description = "设置泛光阈值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setBrightness = {
                args = "(color)Vector3 color 亮度颜色分量",
                description = "设置颜色亮度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setCameraSensitive = {
                args = "(sensitive)float sensitive 镜头灵敏度",
                description = "设置镜头移动的灵敏度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setCurQualityLevel = {
                args = "(level)int level 画质等级(0-2)",
                description = "设置游戏画质",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setCustomFog = {
                args = "(start, end, density, color)参数1:float start 玩家视野不受影响的距离; 参数2:float end 玩家视野到雾的渐变距离; 参数3:float density 雾的密度; 参数4:Vector3 color 雾的颜色",
                description = "设置自定义雾",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableActorRender = {
                args = "(_val)boolean _val 是否能渲染",
                description = "设置是否进行角色的渲染",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableAntiAliasing = {
                args = "(_val)boolean _val 是否启用",
                description = "设置启用反锯齿",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableBlockRender = {
                args = "(_val)boolean _val 是否能渲染",
                description = "设置是否进行方块的渲染",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableBloom = {
                args = "(_val)boolean _val 是否启用",
                description = "设置启用泛光",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableEffectRender = {
                args = "(_val)boolean _val 是否能渲染",
                description = "设置启动特效渲染",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableMotionBlur = {
                args = "(_val)boolean _val 是否启动",
                description = "设置运动模糊",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableRadialBlur = {
                args = "(_val)boolean _val 是否启用",
                description = "设置启用径向模糊",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setEnableSpecular = {
                args = "(_val)float _val 启动数值",
                description = "设置启动镜面反射",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setExtraCameraDistance = {
                args = "(distance)float distance 额外距离",
                description = "设置摄像机基于原来距离上的额外距离",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setLockBodyRotation = {
                args = "(value)boolean value 是否锁定",
                description = "设置是否锁定玩家身体随摄像机旋转",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setLockSlideScreen = {
                args = "(value)boolean value 是否锁定",
                description = "设置启动锁定滑动屏幕",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setLockViewPos = {
                args = "(value)boolean value 是否启动",
                description = "设定启动锁定视图位置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMainLightColor = {
                args = "(color)Vector3 color 主灯光颜色",
                description = "设置主灯光颜色",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMainLightDir = {
                args = "(dir)Vector3 dir 主灯光方向",
                description = "设置主灯光方向",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMotionBlurStrength = {
                args = "(_val)float _val 强度值",
                description = "设置运动模糊强度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMouseMoveState = {
                args = "(bState)boolean bState 是否在移动状态",
                description = "设置鼠标移动状态",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMousePos = {
                args = "(x, y, immd)参数1:float x 鼠标x的位置; 参数2:float y 鼠标y的位置; 参数3:boolean immd 是否清除鼠标路径历史",
                description = "设置鼠标的位置",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setPersonView = {
                args = "(viewMode)int viewMode 视角模式",
                description = "设置个人视角(0:第一人称,1:第三人称,2:正面视角)",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setRadialBlurStrength = {
                args = "(_val)float _val 强度值",
                description = "设置径向模糊强度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setSubLightColor = {
                args = "(color)Vector3 color 子灯光颜色",
                description = "设置子灯光颜色",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setWorldEffectVisualDistance = {
                args = "(distance)float distance 可见距离",
                description = "设置特效显示的可见距离",
                returns = "",
                type = "function",
                valuetype = "",
            },
            viewBobbing = {
                args = "",
                description = "判断是否显示摆动",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
        },
        type = "class",
    },
    Item = {
        childs = {
            CreateItem = {
                args = "(fullName, count, func)参数1:string fullName 道具配置名; 参数2:int count 数量; 参数3:function func 道具实例作为参数的回调函数",
                description = "根据道具配置名创建道具实例",
                returns = "item",
                type = "function",
                valuetype = "item",
            },
        },
        type = "class",
    },
    L = {
        args = "(key,value)参数1:string key 注册的key;参数2:table|string|int value 默认值",
        description = "注册/获取本地变量(用于热更)",
        type = "function",
    },
    Lang = {
        childs = {
            toText = {
                args = "(arg)table arg 多语言key组成的表",
                description = "根据传参返回多语言转换过后的字符串",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
        },
        type = "class",
    },
    Lib = {
        childs = {
            derive = {
                args = "(base, derive)参数1:table base 基类; 参数2:table derive 派生类",
                description = "返回一个继承基类的派生类",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            emitEvent = {
                args = "(name, ...)参数1:string name 事件名; 参数2:Varargs ... 回调函数的可变参数",
                description = "调用事件",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getDayEndTime = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得今天的结束时间戳",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getDayStartTime = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得今天的起始时间戳",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getMonthEndTime = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得这个月的结束时间戳",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getMonthStartTime = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得这个月的起始时间戳",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getPosDistance = {
                args = "(pos1, pos2)参数1:Vector3 pos1 坐标点1; 参数2:Vector3 pos2 坐标点2",
                description = "得到两个点之间的距离",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getRegionCenter = {
                args = "(region)Region region 区域",
                description = "返回区域的中心坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getTableSize = {
                args = "(tb)table tb 目标表",
                description = "返回表里内容的数量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getWeekEndTime = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得这个星期的结束时间戳",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getWeekStartTime = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得这周的起始时间戳",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getWeeksOfYear = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得当前是第几周",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getYearDayStr = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "获得今天是一年的第几天",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getYearMonthStr = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "时间戳转换成年月，结果如201909",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getYearWeekStr = {
                args = "(time)int time 时间戳，可由os.time()获得",
                description = "时间戳转换成年周，结果如201939",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            isPosInRegion = {
                args = "(region, pos)参数1:Region region 区域; 参数2:Vector3 pos 坐标",
                description = "判断坐标是否在区域内",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isSameDay = {
                args = "(time1, time2)参数1:int time1 时间戳，可由os.time()获得; 参数2:int time2 时间戳，可由os.time()获得",
                description = "判断两个时间戳是否为同一天",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            isSameWeek = {
                args = "(time1, time2)参数1:int time1 时间戳，可由os.time()获得; 参数2:int time2 时间戳，可由os.time()获得",
                description = "判断两个时间戳是否为同一周",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            posAroundYaw = {
                args = "(pos, rotationYaw)参数1:Vector3 pos 坐标; 参数2:float rotationYaw 旋转角度",
                description = "返回坐标相对原点绕Y轴旋转后的坐标位置",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            pv = {
                args = "(value, maxLevel, tips)参数1:variant value 输出内容; 参数2:int maxLevel 表内容输出的最大层数; 参数3:variant tips 标志提示",
                description = "打印任何类型输出",
                returns = "",
                type = "function",
                valuetype = "",
            },
            randPosInRegion = {
                args = "(region)Region region 区域",
                description = "返回区域内随机的一个坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            splitString = {
                args = "(str, sep, to_number)参数1:string str 字符串; 参数2:string sep 分割符; 参数3:boolean to_number 是否强转数字",
                description = "根据字符分割字符串内容",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            subscribeEvent = {
                args = "(name, func, ...)参数1:string name 事件名; 参数2:function func 事件回调函数; 参数3:Varargs ... 回调函数的可变参数",
                description = "注册事件",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            tov3 = {
                args = "(v3)table v3 需要转换的表",
                description = "转换成三维坐标实例",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            unsubscribeEvent = {
                args = "(name, index)参数1:string name 事件名; 参数2:int index 事件索引",
                description = "取消事件注册",
                returns = "",
                type = "function",
                valuetype = "",
            },
            v3 = {
                args = "(x, y, z)参数1:float x x轴位置; 参数2:float y y轴位置; 参数3:float z z轴位置",
                description = "返回一个三维坐标实例",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            v3AngleXZ = {
                args = "(v)Vector3 v 向量",
                description = "计算向量在y轴上的旋转角度",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            v4 = {
                args = "(x, y, z, w)参数1:number x x; 参数2:number y y; 参数3:number z z; 参数4:number w w",
                description = "传入4个参数，得到一个vector4实例",
                returns = "Vector4",
                type = "function",
                valuetype = "Vector4",
            },
        },
        type = "class",
    },
    M = {
        childs = {
            getAIControl = {
                args = "(objID)number objID 对象objID",
                description = "得到某个objID对象的ai控制器",
                returns = "",
                type = "function",
                valuetype = "",
            },
            startAI = {
                args = "(entity)number entity 对象objID",
                description = "启动某个AI",
                returns = "",
                type = "function",
                valuetype = "",
            },
            stopAI = {
                args = "(entity)number entity 对象objID",
                description = "停止某个AI",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Map = {
        childs = {
            addRegion = {
                args = "(min, max, cfgName)参数1:Vector3 min 区域最小坐标; 参数2:Vector3 max 区域最大坐标; 参数3:string cfgName 区域配置名",
                description = "添加地图内区域",
                returns = "Region",
                type = "function",
                valuetype = "Region",
            },
            bakeLightAndSave = {
                args = "(maxLightMode, forceRecalculate)参数1:boolean maxLightMode 是否开启光照模式; 参数2:boolean forceRecalculate 是否强制重新计算",
                description = "烘焙当前地图",
                returns = "",
                type = "function",
                valuetype = "",
            },
            cfg = {
                args = "",
                description = "地图配置信息",
                returns = "config",
                type = "value",
                valuetype = "config",
            },
            checkBlockFall = {
                args = "(pos)Vector3 pos 坐标",
                description = "返回具体坐标的方块下坠后的坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            clearBlocks = {
                args = "(min, max, all)参数1:Vector3 min 最小坐标; 参数2:Vector3 max 最大坐标; 参数3:boolean all 全部清空",
                description = "清空一个区域的方块",
                returns = "",
                type = "function",
                valuetype = "",
            },
            clearBlocksConfigId = {
                args = "(min, max, blockIds)参数1:Vector3 min 最小坐标; 参数2:Vector3 max 最大坐标; 参数3:table blockIds 需要忽略方块id表",
                description = "清空一个区域内的方块",
                returns = "",
                type = "function",
                valuetype = "",
            },
            createBlock = {
                args = "(pos, fullName)参数1:Vector3 pos 坐标; 参数2:string fullName 方块名称",
                description = "在指定坐标创建一个方块",
                returns = "",
                type = "function",
                valuetype = "",
            },
            fillBlocksConfigId = {
                args = "(min, max, blockId)参数1:Vector3 min 最小坐标; 参数2:Vector3 max 最大坐标; 参数3:int blockId 方块Id",
                description = "将一个区域填满方块",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getAllRegion = {
                args = "()",
                description = "获取所有的区域",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getBlock = {
                args = "(pos)Vector3 pos 指定位置",
                description = "获取指定位置的方块配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            getBlockConfigId = {
                args = "(pos)Vector3 pos 坐标",
                description = "返回具体坐标上的方块Id",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getBlockData = {
                args = "(pos)Vector3 pos 指定位置",
                description = "获取指定位置的block的数据",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getNearbyEntities = {
                args = "(pos, maxDistance)参数1:Vector3 pos 坐标; 参数2:float maxDistance 最大距离",
                description = "返回指定坐标具体距离内的实体对象表",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getOrCreateBlockData = {
                args = "(pos)Vector3 pos 指定位置",
                description = "获取指定位置的block的数据如果没有就设置一个空表并返回",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getPosArrayWithIdsInArea = {
                args = "(min, max, blockIds)参数1:Vector3 min 最小坐标; 参数2:Vector3 max 最大坐标; 参数3:table blockIds 方块Id表",
                description = "返回区域内某些方块Id的方块所在坐标",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getRegion = {
                args = "(key)string key 区域id",
                description = "获取一个区域",
                returns = "Region",
                type = "function",
                valuetype = "Region",
            },
            getTouchEntities = {
                args = "(min, max, includeDead)参数1:Vector3 min 最小坐标; 参数2:Vector3 max 最大坐标; 参数3:boolean includeDead 包括死亡",
                description = "返回指定大小的碰撞盒子能碰撞到的实体对象表",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getTouchObject = {
                args = "(min, max)参数1:Vector3 min 最小坐标; 参数2:Vector3 max 最大坐标",
                description = "返回指定大小的碰撞盒子能碰撞到的对象表",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getVar = {
                args = "(key)string key 地图该项数据的key",
                description = "获取地图的某项数据",
                returns = "variant",
                type = "function",
                valuetype = "variant",
            },
            id = {
                args = "",
                description = "地图唯一Id",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            isValid = {
                args = "()",
                description = "判断地图是否有效",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            loadBlocks = {
                args = "(min, max, data)参数1:Vector3 min 指定区域在地图内的最小点; 参数2:Vector3 max 指定区域在地图内的最大点; 参数3:string data 方块数据",
                description = "通过方块数据在地图内指定区域加载方块",
                returns = "",
                type = "function",
                valuetype = "",
            },
            movePlayersTo = {
                args = "(map, pos)参数1:Map map 新地图; 参数2:Vector3 pos 新地图中的位置",
                description = "移动地图内所有的玩家到新地图",
                returns = "",
                type = "function",
                valuetype = "",
            },
            name = {
                args = "",
                description = "地图名称",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
            objects = {
                args = "",
                description = "位于地图内的所有对象",
                returns = "table",
                type = "value",
                valuetype = "table",
            },
            players = {
                args = "",
                description = "位于地图内的所有玩家",
                returns = "table",
                type = "value",
                valuetype = "table",
            },
            removeBlock = {
                args = "(pos)Vector3 pos 坐标",
                description = "移除指定坐标的方块",
                returns = "",
                type = "function",
                valuetype = "",
            },
            removeRegion = {
                args = "(key)string key 区域唯一标识",
                description = "移除地图内区域",
                returns = "Region",
                type = "function",
                valuetype = "Region",
            },
            saveBlocks = {
                args = "(min, max, allBlock)参数1:Vector3 min 指定区域在地图内的最小点; 参数2:Vector3 max 指定区域在地图内的最大点; 参数3:boolean allBlock 是否转换全部",
                description = "返回地图里指定区域内的方块数据转换的字符串",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            setBlockConfigId = {
                args = "(pos, blockId)参数1:Vector3 pos 坐标; 参数2:int blockId 方块Id",
                description = "在地图中生成一个方块",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            setBlockData = {
                args = "(pos, value)参数1:Vector3 pos 指定位置; 参数2:table value 要设置的方块数据",
                description = "设置指定位置方块的数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setVar = {
                args = "(key, value)参数1:string key 地图该项数据的key; 参数2:variant value 值",
                description = "设置地图的某项数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            static = {
                args = "",
                description = "是否是静态地图",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            triggerRegions = {
                args = "(pos, name, context)参数1:Vector3 pos 指定位置; 参数2:string name 事件名称; 参数3:table context 触发事件传入的参数",
                description = "触发指定位置所在的区域的区域事件",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Missile = {
        childs = {
            name = {
                args = "",
                description = "名称",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
        },
        type = "class",
    },
    Object = {
        childs = {
            cfg = {
                args = "()",
                description = "获取对象配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            data = {
                args = "(key)string key 数据的key",
                description = "获取某项数据",
                returns = "variant",
                type = "function",
                valuetype = "variant",
            },
            delayCall = {
                args = "(func, time)参数1:function func 调用函数; 参数2:int time 延迟时间帧",
                description = "延迟调用函数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            destroy = {
                args = "()",
                description = "销毁对象",
                returns = "",
                type = "function",
                valuetype = "",
            },
            distance = {
                args = "(obj)Object obj 目标对象",
                description = "返回与目标对象的距离",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getPosition = {
                args = "()",
                description = "获得当前位置坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            getRotationPitch = {
                args = "()",
                description = "获得当前pitch角度数值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getRotationYaw = {
                args = "()",
                description = "获得当前yaw角度数值",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            isEntity = {
                args = "",
                description = "判断对象是否是实体对象",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isMainPlayer = {
                args = "",
                description = "判断对象是否是客户端的主玩家",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isPlayer = {
                args = "",
                description = "判断对象是否是玩家",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isValid = {
                args = "()",
                description = "判断自己是否还是有效对象",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            lightTimer = {
                args = "(stack, time, func, ...)参数1:string  stack 错误时打印信息; 参数2:int time 时间; 参数3:function func 定时器执行函数; 参数4:any ... 定时器执行函数携带参数",
                description = "开启一个自定义错误输出内容的定时器并返回一个停止该定时器的函数",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            objID = {
                args = "",
                description = "对象唯一Id",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            ownerId = {
                args = "",
                description = "拥有者对象Id",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            setData = {
                args = "(key, val)参数1:string key 数据的key; 参数2:variant val 数据",
                description = "设置某项数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setMap = {
                args = "(map)Map map 地图实例",
                description = "将对象移动到指定地图",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            setPosition = {
                args = "(pos)Vector3 pos 位置坐标",
                description = "设置对象到位置坐标",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setRotationPitch = {
                args = "(pitch)float pitch pitch角度",
                description = "设置pitch轴旋转角度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setRotationYaw = {
                args = "(yaw)float yaw yaw角度",
                description = "设置对象yaw轴的朝向",
                returns = "",
                type = "function",
                valuetype = "",
            },
            timer = {
                args = "(time, function, ...)参数1:int time 时间; 参数2:function function 定时器执行函数; 参数3:args ... 定时器函数携带参数",
                description = "开启一个定时器并返回一个停止该定时器的函数",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            world = {
                args = "",
                description = "对象实例所处的世界",
                returns = "World",
                type = "value",
                valuetype = "World",
            },
        },
        type = "class",
    },
    PackageHandlers = {
        childs = {
            registerClientHandler = {
                args = "(name, func)参数1:string name 协议名; 参数2:function func 协议调用函数",
                description = "注册客户端通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
            registerServerHandler = {
                args = "(name, func)参数1:string name 协议名; 参数2:function func 协议调用函数",
                description = "注册服务端通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sendClientHandler = {
                args = "(name, packet, resp)参数1:string name 协议名; 参数2:table packet 执行协议函数的参数; 参数3:function resp 协议回调函数",
                description = "向服务端发送通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sendOtherClient = {
                args = "(userId, name, packet)参数1:int userId 玩家平台Id; 参数2:string name 协议名; 参数3:table packet 执行协议函数的参数",
                description = "向其他客户端玩家发送通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sendServerHandler = {
                args = "(player, name, packet)参数1:Player player 玩家实例; 参数2:string name 协议名; 参数3:table packet 执行协议函数的参数",
                description = "向指定玩家的客户端发送通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sendServerHandlerToAll = {
                args = "(name, packet)参数1:string name 协议名; 参数2:table packet 执行协议函数的参数",
                description = "向游戏世界中所有的玩家发送通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sendServerHandlerToTracking = {
                args = "(entity, name, packet, includeSelf)参数1:Entity entity 实体对象; 参数2:string name 协议名; 参数3:table packet 执行协议函数的参数; 参数4:boolean includeSelf 是否包括自己",
                description = "向指定实体对象视野内玩家发送通信协议",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Player = {
        childs = {
            addCurrency = {
                args = "(coinName, count, reason)参数1:string coinName 货币名称; 参数2:int count 数量; 参数3:string reason 添加理由",
                description = "添加游戏内货币",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addPet = {
                args = "(entity, index)参数1:Entity entity 实体对象; 参数2:int index 指定宠物位置的索引",
                description = "添加宠物",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            changePetCfg = {
                args = "(index, cfgName)参数1:int index 宠物位置的索引; 参数2:string cfgName 实体配置名",
                description = "改变宠物原有的配置信息",
                returns = "",
                type = "function",
                valuetype = "",
            },
            createPet = {
                args = "(cfgName, show, map, pos)参数1:string cfgName 实体配置名; 参数2:boolean show 是否显示在地图上; 参数3:Map map 显示地图; 参数4:Vector3 pos 显示坐标",
                description = "生成宠物",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            getPet = {
                args = "(index)int index 宠物位置的索引",
                description = "返回宠物实例",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
            getPlayerAttrInfo = {
                args = "()",
                description = "TODO",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getWalletBalance = {
                args = "(coinName)string coinName 货币名称",
                description = "返回货币余额",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            hidePet = {
                args = "(index)int index 宠物位置的索引",
                description = "隐藏宠物的显示",
                returns = "",
                type = "function",
                valuetype = "",
            },
            isDead = {
                args = "()",
                description = "返回是否死亡",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            payCurrency = {
                args = "(coinName, count, clear, check, reason)参数1:string coinName 货币名称; 参数2:int count 数量; 参数3:boolean clear 不足时是否清空; 参数4:boolean check 是否只检查; 参数5:string reason 支付理由",
                description = "支付游戏内货币",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            relievedPet = {
                args = "(index)int index 宠物位置的索引",
                description = "解除与宠物的关系",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
            removePet = {
                args = "(index)int index 宠物位置的索引",
                description = "移除宠物",
                returns = "",
                type = "function",
                valuetype = "",
            },
            showPet = {
                args = "(index, map, pos)参数1:int index 宠物位置的索引; 参数2:Map map 地图; 参数3:Vector3 pos 坐标",
                description = "将宠物显示在场景中",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    PlayerControl = {
        childs = {
            attach = {
                args = "(entity)Entity entity 指定的实体",
                description = "使当前玩家控制器控制指定的实体",
                returns = "",
                type = "function",
                valuetype = "",
            },
            enable = {
                args = "",
                description = "当前玩家控制器能否控制实体",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            entity = {
                args = "",
                description = "当前玩家控制器所控制的客户端实体",
                returns = "Entity",
                type = "value",
                valuetype = "Entity",
            },
            jump = {
                args = "()",
                description = "使控制实体跳跃",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
        },
        type = "class",
    },
    Profiler = {
        childs = {
            begin = {
                args = "(name)string name 统计的标记别名",
                description = "性能统计耗时的开始，与Profiler:finish一起使用，统计中间代码耗时情况",
                returns = "",
                type = "function",
                valuetype = "",
            },
            dumpCSV = {
                args = "(fileName)string fileName 文件名",
                description = "将性能统计结果导出到CSV结果",
                returns = "",
                type = "function",
                valuetype = "",
            },
            dumpString = {
                args = "",
                description = "将性能统计结果转换成字符串",
                returns = "",
                type = "function",
                valuetype = "",
            },
            finish = {
                args = "(name)string name 统计的标记别名",
                description = "性能统计耗时的结束，与Profiler:begin一起使用，统计中间代码耗时情况",
                returns = "",
                type = "function",
                valuetype = "",
            },
            reset = {
                args = "",
                description = "重置性能统计，重新计算结果",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Quaternion = {
        childs = {
            __add = {
                args = "(lhs, rhs)参数1:Quaternion lhs 左值四元数; 参数2:Quaternion rhs 右值四元数",
                description = "重载+号操作符，四元数加法操作",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            __div = {
                args = "(lhs, rhs)参数1:Quaternion lhs 左值四元数; 参数2:Quaternion rhs 右值四元数",
                description = "重载/号操作符，四元数除法操作",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            __mul = {
                args = "(lhs, rhs)参数1:Quaternion lhs 左值四元数; 参数2:Quaternion rhs 右值四元数",
                description = "重载*号操作符，四元数乘法操作",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            __sub = {
                args = "(lhs, rhs)参数1:Quaternion lhs 左值四元数; 参数2:Quaternion rhs 右值四元数",
                description = "重载-号操作符，四元数减法操作",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            __unm = {
                args = "",
                description = "重载-号操作符，四元数取反操作",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            conjugated = {
                args = "",
                description = "获得自共轭四元数",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            cross = {
                args = "(rhs)Quaternion rhs 叉乘的另一个四元数",
                description = "叉乘另外一个四元数",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            dot = {
                args = "(rhs)Quaternion rhs 点乘的另一个四元数",
                description = "点乘另外一个四元数",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            fromEulerAngle = {
                args = "(pitch, yaw, roll)参数1:number pitch 俯仰角; 参数2:number yaw 偏航角; 参数3:number roll 翻滚角",
                description = "从欧拉角转成四元数",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            fromEulerAngleVector = {
                args = "(v3)Vector3 v3 向量",
                description = "从欧拉角向量表转成四元数",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            fromTable = {
                args = "(v4)table v4 需包含key有 w、x、y、z的表",
                description = "根据表数据new一个四元数实例",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            len = {
                args = "",
                description = "计算长度",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            lenSqr = {
                args = "",
                description = "计算长度的平方",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            normalized = {
                args = "",
                description = "四元数归一化",
                returns = "Quaternion",
                type = "function",
                valuetype = "Quaternion",
            },
            toEulerAngle = {
                args = "",
                description = "转成欧拉角",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
        },
        type = "class",
    },
    Rank = {
        childs = {
            GetMyRanks = {
                args = "(rankType)字符串 rankType 排行榜的类型",
                description = "提供外界一个Get方法，用于获取自己的排行榜数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            GetMyScores = {
                args = "(rankType)字符串 rankType 排行榜的类型",
                description = "提供外界一个Get方法，用于获取自己的分数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            GetRankData = {
                args = "(rankType)字符串 rankType 排行榜的类型",
                description = "提供外界一个Get方法，用于获取所有排行榜的数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            RequestRankData = {
                args = "(requestType)字符串 requestType 排行类型",
                description = "用于请求排行榜数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    RedisHandler = {
        childs = {
            ZAdd = {
                args = "(setName, key, value)参数1:string setName 排行榜索引; 参数2:string key 数据索引; 参数3:int value 新排行数据",
                description = "根据数据索引给指定排行榜数据与更新的数据比较取最大值作为新数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ZExpireat = {
                args = "(setName, timeStamp)参数1:string setName 排行榜索引; 参数2:int timeStamp 时间戳",
                description = "设置排行榜数据的有效期终止的时间戳",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ZIncrBy = {
                args = "(setName, key, value)参数1:string setName 排行榜索引; 参数2:int key 数据索引; 参数3:int value 增值",
                description = "根据数据索引给指定排行榜数据增值",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ZRange = {
                args = "(setName, start, _end, callback)参数1:string setName 排行榜索引; 参数2:int start 起始排名; 参数3:int _end 末尾排名; 参数4:function callback 请求结果和排名数据作为参数的回调函数",
                description = "向数据库请求从指定排名区间的排名数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ZRemove = {
                args = "(setName, key)参数1:string setName 排行榜索引; 参数2:string key 数据索引",
                description = "根据数据索引清空排行榜数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            ZScore = {
                args = "(setName, key, callback)参数1:string setName 排行榜索引; 参数2:string key 数据索引; 参数3:function callback 结果,数据和排名作为参数的回调函数",
                description = "向数据库请求指定数据索引的数据与排名信息",
                returns = "",
                type = "function",
                valuetype = "",
            },
            hasCachedData = {
                args = "()",
                description = "本地当前是否存在未发送的数据记录",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            trySendZExpire = {
                args = "(immediately)boolean immediately 是否立即发送",
                description = "向数据库发送排名清空记录",
                returns = "",
                type = "function",
                valuetype = "",
            },
            trySendZIncBy = {
                args = "(immediately)boolean immediately 是否立即发送",
                description = "向数据库发送玩家分数增加记录",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Region = {
        childs = {
            cfg = {
                args = "",
                description = "区域实例的配置信息，用于注册触发事件",
                returns = "config",
                type = "value",
                valuetype = "config",
            },
            isOwner = {
                args = "(entity)object entity 对象",
                description = "判断传入的entity是否为区域的拥有者",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            key = {
                args = "",
                description = "区域实例的唯一标识key",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
            map = {
                args = "",
                description = "区域所在地图实例",
                returns = "Map",
                type = "value",
                valuetype = "Map",
            },
            max = {
                args = "",
                description = "区域最大坐标",
                returns = "Vector3",
                type = "value",
                valuetype = "Vector3",
            },
            mix = {
                args = "",
                description = "区域最小坐标",
                returns = "Vector3",
                type = "value",
                valuetype = "Vector3",
            },
            removeOwner = {
                args = "(obj)object obj 拥有者",
                description = "移除地图的拥有者",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setOwner = {
                args = "(obj)object obj 拥有者",
                description = "设置区域的拥有者",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Sound3DRollOffType = {
        childs = {
            CUSTOM = {
                args = "",
                description = "自定义",
                returns = "",
                type = "value",
                valuetype = "",
            },
            INVERSE = {
                args = "",
                description = "相反",
                returns = "",
                type = "value",
                valuetype = "",
            },
            INVERSETAPERED = {
                args = "",
                description = "锥形相反",
                returns = "",
                type = "value",
                valuetype = "",
            },
            LINEAR = {
                args = "",
                description = "线性",
                returns = "",
                type = "value",
                valuetype = "",
            },
            LINEARSQUARE = {
                args = "",
                description = "平方线性",
                returns = "",
                type = "value",
                valuetype = "",
            },
        },
        type = "class",
    },
    T = {
        args = "(tb,key,value)参数1:table tb 全局变量;参数2:string key 获取的key;参数3:table | string value 默认值",
        description = "注册/获取全局变量的某个数据的值",
        type = "function",
    },
    TdAudioEngine = {
        childs = {
            Instance = {
                args = "()",
                description = "获得TdAudioEngine的实例",
                returns = "TdAudioEngine",
                type = "function",
                valuetype = "TdAudioEngine",
            },
            allMute = {
                args = "(isMute)boolean isMute 是否全部静音",
                description = "全部静音",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getGlobalVolume = {
                args = "()",
                description = "获取全局音量",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            getSoundsVolume = {
                args = "(nSoundId)int nSoundId 音效id号",
                description = "获取音效音量",
                returns = "float",
                type = "function",
                valuetype = "float",
            },
            isPlaying = {
                args = "(nSoundId)int nSoundId 音效id号",
                description = "判断是否播放",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            pauseSound = {
                args = "(nSoundId)int nSoundId 音效id号",
                description = "暂停播放",
                returns = "",
                type = "function",
                valuetype = "",
            },
            play2dSound = {
                args = "(filePath, isLoop)参数1:string filePath 文件路径; 参数2:boolean isLoop 是否循环",
                description = "播放2d音效",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            play3dSound = {
                args = "(filePath, pos, isLoop)参数1:string filePath 文件路径; 参数2:Vector3 pos 播放位置; 参数3:boolean isLoop 是否循环",
                description = "播放3d音效",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            resumeSound = {
                args = "(nSoundId)int nSoundId 音效id号",
                description = "恢复声音播放",
                returns = "",
                type = "function",
                valuetype = "",
            },
            set3DMinMaxDistance = {
                args = "(nSoundId, minDistance, maxDistance)参数1:int nSoundId 音效id号; 参数2:float minDistance 最小距离值; 参数3:float maxDistance 最大距离值",
                description = "设置3d音效最大最小之间的跨距",
                returns = "",
                type = "function",
                valuetype = "",
            },
            set3DRollOffMode = {
                args = "(nSoundId, mode)参数1:int nSoundId 音效id号; 参数2:Sound3DRollOffType mode 3d音效的衰减类型",
                description = "设置3d音效的衰弱模式",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setGlobalVolume = {
                args = "(volume)float volume 音量大小",
                description = "设置全局音量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setSoundSpeed = {
                args = "(nSoundId, percentage)参数1:int nSoundId 音效id号; 参数2:float percentage 百分比",
                description = "设置音效播放速度",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setSoundsVolume = {
                args = "(nSoundId, volume)参数1:int nSoundId 音效id号; 参数2:float volume 音量值",
                description = "设置音效的音量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            stopSound = {
                args = "(nSoundId)int nSoundId 音效id号",
                description = "停止音效",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Team = {
        childs = {
            createTime = {
                args = "",
                description = "队伍创建的时间帧",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            dismiss = {
                args = "()",
                description = "解散队伍",
                returns = "",
                type = "function",
                valuetype = "",
            },
            getEntityList = {
                args = "()",
                description = "获取队伍中所有成员",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getFirstPlayer = {
                args = "()",
                description = "返回第一个进入队伍的玩家",
                returns = "Player",
                type = "function",
                valuetype = "Player",
            },
            id = {
                args = "",
                description = "队伍Id",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
            joinEntity = {
                args = "(entity)Entity entity 实体对象",
                description = "将实体对象加入到队伍中",
                returns = "",
                type = "function",
                valuetype = "",
            },
            leaveEntity = {
                args = "(entity)Entity entity 队伍成员",
                description = "把队伍成员从队伍中移除",
                returns = "",
                type = "function",
                valuetype = "",
            },
            playerCount = {
                args = "",
                description = "队伍内成员是玩家的数量",
                returns = "int",
                type = "value",
                valuetype = "int",
            },
        },
        type = "class",
    },
    Tray = {
        childs = {
            new_tray = {
                args = "(type, capacity)参数1:Define.TRAY_CLASS_BAG type 背包类型; 参数2:int capacity 背包容量",
                description = "创建一个背包实例",
                returns = "tray",
                type = "function",
                valuetype = "tray",
            },
            switch = {
                args = "(tray_1, slot_1, tray_2, slot_2)参数1:tray tray_1 背包1; 参数2:int slot_1 槽; 参数3:tray tray_2 背包2; 参数4:int slot_2 槽",
                description = "交换背包中道具的位置",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    Trigger = {
        childs = {
            CheckTriggers = {
                args = "(cfg, name, context)参数1:config cfg 需要触发事件的对象的配置信息; 参数2:string name 事件名称; 参数3:table context 触发回调函数时携带的上下文信息",
                description = "触发事件并指定对象，不管有没有指定对象都会触发全局事件",
                returns = "",
                type = "function",
                valuetype = "",
            },
            CheckTriggersOnly = {
                args = "(cfg, name, context)参数1:config cfg 需要触发事件的对象的配置信息; 参数2:string name 事件名称; 参数3:table context 触发回调函数时携带的上下文信息",
                description = "指定对象触发事件，不会触发全局事件",
                returns = "",
                type = "function",
                valuetype = "",
            },
            RegisterHandler = {
                args = "(cfg, name, handler)参数1:config cfg 需要触发事件的对象的配置信息; 参数2:string name 事件名称; 参数3:function handler 处理回调函数",
                description = "注册触发事件的处理回调函数(覆盖)",
                returns = "",
                type = "function",
                valuetype = "",
            },
            addHandler = {
                args = "(cfg, name, handler)参数1:config cfg 需要触发事件的对象模板的配置信息; 参数2:string name 事件名称; 参数3:function handler 处理回调函数",
                description = " 添加模板触发事件的处理回调函数(调用链)",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
        },
        type = "class",
    },
    UDim = {
        childs = {
            new = {
                args = "(scale, offset)参数1:number scale 相对比例，表示在UDim2中轴的缩放比例; 参数2:number offset 像素单元，表示在UDim2中轴的像素大小",
                description = "创建一个UDim类型的组件",
                returns = "UDim",
                type = "function",
                valuetype = "UDim",
            },
            offset = {
                args = "",
                description = "像素单元",
                returns = "number",
                type = "value",
                valuetype = "number",
            },
            scale = {
                args = "",
                description = "相对比例",
                returns = "number",
                type = "value",
                valuetype = "number",
            },
        },
        type = "class",
    },
    UDim2 = {
        childs = {
            height = {
                args = "",
                description = "y尺寸比例与偏移",
                returns = "UDim",
                type = "value",
                valuetype = "UDim",
            },
            new = {
                args = "(x, y)参数1:UDim x UDim2 中x轴的比例与偏移; 参数2:UDim y UDim2 中y轴的比例与偏移",
                description = "创建一个 UDim2 类型的组件",
                returns = "UDim2",
                type = "function",
                valuetype = "UDim2",
            },
            width = {
                args = "",
                description = "x尺寸比例与偏移",
                returns = "UDim",
                type = "value",
                valuetype = "UDim",
            },
            x = {
                args = "",
                description = "x尺寸比例与偏移",
                returns = "UDim",
                type = "value",
                valuetype = "UDim",
            },
            y = {
                args = "",
                description = "y尺寸比例与偏移",
                returns = "UDim",
                type = "value",
                valuetype = "UDim",
            },
        },
        type = "class",
    },
    UI = {
        childs = {
            closeWindow = {
                args = "(instanceOrName, args)参数1:variant instanceOrName 窗口实例或者窗口实例名称; 参数2:tuple args 窗口实例onClose函数的参数",
                description = "关闭一个窗口实例",
                returns = "",
                type = "function",
                valuetype = "",
            },
            createButton = {
                args = "(name)string name 控件实例的名称，默认自动生成唯一的名称",
                description = "创建一个按钮控件",
                returns = "ButtonWindow",
                type = "function",
                valuetype = "ButtonWindow",
            },
            createStaticImage = {
                args = "(name)string name 控件实例的名称，默认自动生成唯一的名称",
                description = "创建一个图片控件",
                returns = "StaticImageWindow",
                type = "function",
                valuetype = "StaticImageWindow",
            },
            createStaticText = {
                args = "(name)string name 控件实例的名称，默认自动生成唯一的名称",
                description = "创建一个文本控件",
                returns = "StaticTextWindow",
                type = "function",
                valuetype = "StaticTextWindow",
            },
            createWindow = {
                args = "(name, type)参数1:string name 指定控件名称，默认自动生成唯一的名称; 参数2:string type 指定控件类型，默认为基础控件",
                description = "创建指定类型的控件，默认创建基础控件",
                returns = "WindowInstance",
                type = "function",
                valuetype = "WindowInstance",
            },
            isOpenWindow = {
                args = "(name)string name 布局名称",
                description = "根据布局名称判断该窗口实例是否正在显示",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            openWindow = {
                args = "(windowName, instanceName, resGroup, args)参数1:string windowName 窗口布局名称; 参数2:string instanceName 实例名称; 参数3:string resGroup 资源组名称，默认layouts; 参数4:tuple args 窗口实例onOpen函数的参数",
                description = "创建一个窗口实例并显示",
                returns = "WindowInstance",
                type = "function",
                valuetype = "WindowInstance",
            },
        },
        type = "class",
    },
    UserInfoCache = {
        childs = {
            CancelRequest = {
                args = "(session)int session 请求索引",
                description = "取消请求加载用户数据",
                returns = "",
                type = "function",
                valuetype = "",
            },
            GetCache = {
                args = "(userId)int userId 用户id",
                description = "通过用户id获取缓存信息",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            LoadCacheByUserIds = {
                args = "(userIds, callback)参数1:数组 userIds 一个包含多个用户id的数组; 参数2:function callback 用户信息作为参数的回调函数",
                description = "请求加载用户数据",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
        },
        type = "class",
    },
    Vector3 = {
        childs = {
            __add = {
                args = "(v3)Vector3 v3 被加数",
                description = "重载+号操作符，加上另外一个向量",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            __div = {
                args = "(n)number n 数值",
                description = "重载/号操作符，除以一个数值",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            __eq = {
                args = "(v3)Vector3 v3 另一个向量",
                description = "重载符号操作，判断两个向量是否相等",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __le = {
                args = "(v3)Vector3 v3 向量2",
                description = "重载符号操作，向量1 <= 向量2",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __lt = {
                args = "(v3)Vector3 v3 向量2",
                description = "重载符号操作，向量1 < 向量2",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __mul = {
                args = "(lhs, rhs)参数1:number lhs 左值; 参数2:number rhs 右值",
                description = "重载*号操作符，乘上一个数值",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            __sub = {
                args = "(v3)Vector3 v3 被减数",
                description = "重载-号操作符，减去另外一个向量",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            __tostring = {
                args = "",
                description = "转成字符串",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            __unm = {
                args = "",
                description = "重载符号操作符，取反",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            add = {
                args = "(v3)Vector3 v3 向量2",
                description = "加上向量2",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            blockPos = {
                args = "",
                description = "转成方块坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            copy = {
                args = "",
                description = "深拷贝这个向量，得到一个新的向量",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            cross = {
                args = "(rhs)Vector3 rhs 向量",
                description = "叉乘另外一个向量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            dot = {
                args = "(rhs)Vector3 rhs 向量",
                description = "点乘另外一个向量",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            isZero = {
                args = "",
                description = "判断是否为零向量",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            len = {
                args = "",
                description = "获取向量的长度",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            lenSqr = {
                args = "",
                description = "获取向量的长度的平方",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            mul = {
                args = "(n)number n 数值",
                description = "乘上一个数值",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            normalize = {
                args = "",
                description = "向量归一化",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sub = {
                args = "(v3)Vector3 v3 向量2",
                description = "减去向量2",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            x = {
                args = "",
                description = "三维坐标x轴",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            y = {
                args = "",
                description = "三维坐标y轴",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
            z = {
                args = "",
                description = "三维坐标z轴",
                returns = "float",
                type = "value",
                valuetype = "float",
            },
        },
        type = "class",
    },
    Vector4 = {
        childs = {
            __add = {
                args = "(v4)vector4 v4 向量",
                description = "重载+号操作符，加上另外一个向量",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            __div = {
                args = "(n)number n 常数",
                description = "重载/号操作符，除以另外一个常数",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            __eq = {
                args = "(v4)vector4 v4 向量",
                description = "重载符号操作，判断两个向量是否相等",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __le = {
                args = "(v4)vector4 v4 向量",
                description = "重载符号操作，向量1 <= 向量2",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __lt = {
                args = "(v4)vector4 v4 向量",
                description = "重载符号操作，向量1 < 向量2",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            __mul = {
                args = "(n)number n 数值",
                description = "重载*号操作符，乘上另外一个常数",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            __sub = {
                args = "(v4)vector4 v4 向量",
                description = "重载-号操作符，减去另外一个向量",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            __tostring = {
                args = "",
                description = "转成字符串",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            __unm = {
                args = "",
                description = "重载符号操作符，取反",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            add = {
                args = "(v4)vector4 v4 向量2",
                description = "加上向量2",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            blockPos = {
                args = "",
                description = "转成方块坐标",
                returns = "Vector3",
                type = "function",
                valuetype = "Vector3",
            },
            copy = {
                args = "",
                description = "深拷贝这个向量，得到一个新的向量",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            isZero = {
                args = "",
                description = "判断是否为零向量",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            len = {
                args = "",
                description = "获取向量的长度",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            lenSqr = {
                args = "",
                description = "获取向量的长度的平方",
                returns = "number",
                type = "function",
                valuetype = "number",
            },
            mul = {
                args = "(n)number n 数值",
                description = "乘上一个数值",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
            normalize = {
                args = "",
                description = "向量归一化",
                returns = "",
                type = "function",
                valuetype = "",
            },
            sub = {
                args = "(v4)vector4 v4 向量2",
                description = "减去向量2",
                returns = "vector4",
                type = "function",
                valuetype = "vector4",
            },
        },
        type = "class",
    },
    World = {
        childs = {
            CurMap = {
                args = "",
                description = "获取客户端主玩家所在地图",
                returns = "Map",
                type = "value",
                valuetype = "Map",
            },
            CurWorld = {
                args = "",
                description = "获取当前世界实例",
                returns = "World",
                type = "value",
                valuetype = "World",
            },
            GameName = {
                args = "",
                description = "获取当前游戏名",
                returns = "string",
                type = "value",
                valuetype = "string",
            },
            LightTimer = {
                args = "(stack, time, func, ...)参数1:string stack 自定义的堆栈内容; 参数2:int time 时间; 参数3:function func 定时器执行函数; 参数4:args ... 定时器执行函数携带参数",
                description = "开启一个可以自定错误时输出特定内容的定时器并且返回一个停止计时器的函数，时间以帧为单位",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            Now = {
                args = "()",
                description = "返回游戏运行到当前为止的时间帧(每秒约20帧)",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            SystemChat = {
                args = "(typ, key, ...)参数1:string typ 信息类型; 参数2:string key 信息内容的多语言key; 参数3:table ... 聊天信息的其他参数",
                description = "广播系统聊天信息",
                returns = "",
                type = "function",
                valuetype = "",
            },
            SystemNotice = {
                args = "(typ, key, time, ...)参数1:int typ 信息类型; 参数2:string key 信息内容的多语言key; 参数3:int time 信息的持续时间; 参数4:table ... 信息的其他参数",
                description = "广播系统提示",
                returns = "",
                type = "function",
                valuetype = "",
            },
            Timer = {
                args = "(time, func, ...)参数1:int time 时间; 参数2:function func 定时器执行函数; 参数3:args ... 定时器执行函数携带参数",
                description = "开启一个定时器并且返回一个可以停止定时器的函数,时间以帧为单位",
                returns = "function",
                type = "function",
                valuetype = "function",
            },
            createDynamicMap = {
                args = "(name, closeWhenEmpty)参数1:string name 地图名称; 参数2:boolean closeWhenEmpty 是否当地图内没有玩家时关闭",
                description = "创建一个动态地图",
                returns = "Map",
                type = "function",
                valuetype = "Map",
            },
            defaultMap = {
                args = "",
                description = "获取默认地图",
                returns = "Map",
                type = "value",
                valuetype = "Map",
            },
            enableReconnectNetwork = {
                args = "",
                description = "网络重连开关",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            filterWord = {
                args = "(content)string content 文本内容",
                description = "过滤文本内容中的敏感词",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            getAllObject = {
                args = "()",
                description = "返回世界中所有的对象实例",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            getMap = {
                args = "(map)string map 通过地图名称返回一个地图，如果不存在就创建地图并返回",
                description = "返回一个地图实例",
                returns = "Map",
                type = "function",
                valuetype = "Map",
            },
            getMapById = {
                args = "(id)int id 地图id",
                description = "通过地图Id返回一个地图实例",
                returns = "Map",
                type = "function",
                valuetype = "Map",
            },
            getObject = {
                args = "(objID)int objID 对象ID",
                description = "通过对象ID在世界中寻找对象实例并返回",
                returns = "object",
                type = "function",
                valuetype = "object",
            },
            getOrCreateStaticMap = {
                args = "(name)string name 地图名称",
                description = "获取一个静态地图，如果获取不到就创建一个静态地图",
                returns = "Map",
                type = "function",
                valuetype = "Map",
            },
            isClient = {
                args = "",
                description = "当前运行环境是否为客户端",
                returns = "boolean",
                type = "value",
                valuetype = "boolean",
            },
            isTimeStopped = {
                args = "()",
                description = "返回游戏世界中是否停止了时间流逝",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            setTimeStopped = {
                args = "(stepped)boolean stepped 是否停止时间流逝",
                description = "停止游戏世界的时间流逝",
                returns = "",
                type = "function",
                valuetype = "",
            },
            setWorldTimeSpeed = {
                args = "(time)double time 流逝速度",
                description = "设置游戏世界的时间流逝速度",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    eventFunc = {
        childs = {
            onHurt = {
                args = "(self, ...)参数1:TODO self TODO; 参数2:TODO ... TODO",
                description = "TODO",
                returns = "",
                type = "function",
                valuetype = "",
            },
        },
        type = "class",
    },
    item = {
        childs = {
            block_cfg = {
                args = "()",
                description = "获取方块配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            block_id = {
                args = "()",
                description = "获取道具方块id",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            cfg = {
                args = "()",
                description = "获取道具配置信息",
                returns = "config",
                type = "function",
                valuetype = "config",
            },
            consume = {
                args = "(count)int count 消耗数",
                description = "消耗道具",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            full_name = {
                args = "()",
                description = "获取道具配置名",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            icon = {
                args = "()",
                description = "获取道具图标路径",
                returns = "string",
                type = "function",
                valuetype = "string",
            },
            is_block = {
                args = "()",
                description = "判断道具是否为方块",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            model = {
                args = "(act)string act 行为名称,默认值default",
                description = "根据行为名称获取道具模型",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            null = {
                args = "()",
                description = "判断道具数据是否存在",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            replace = {
                args = "(fullName)string fullName 道具配置名",
                description = "使用指定的道具配置名替换原有的道具信息",
                returns = "",
                type = "function",
                valuetype = "",
            },
            set_block = {
                args = "(name)string name 方块配置名",
                description = "设置道具的方块配置名",
                returns = "",
                type = "function",
                valuetype = "",
            },
            set_block_id = {
                args = "(id)int id 方块id",
                description = "设置道具的方块id",
                returns = "",
                type = "function",
                valuetype = "",
            },
            set_stack_count = {
                args = "(count)int count 叠加数",
                description = "设置当前叠加数",
                returns = "",
                type = "function",
                valuetype = "",
            },
            slot = {
                args = "()",
                description = "返回道具实例所在的背包位置",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            stack_count = {
                args = "()",
                description = "获取当前叠加数",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            stack_count_max = {
                args = "()",
                description = "获取道具在背包内最大叠加数",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            stack_free = {
                args = "()",
                description = "获取剩余可叠加的道具数量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            tid = {
                args = "()",
                description = "返回道具实例所在的背包Id",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
        },
        type = "class",
    },
    tray = {
        childs = {
            add_capacity = {
                args = "(capacity)int capacity 增加容量",
                description = "在原有的背包容量上增加容量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            avail_capacity = {
                args = "()",
                description = "返回可使用容量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            capacity = {
                args = "()",
                description = "背包容量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            count_item_num_by_fullname = {
                args = "(fullname)string fullname 物品名",
                description = "根据道具名称从背包中返回道具的数量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            fetch_item = {
                args = "(slot)int slot 背包位置",
                description = "返回背包指定位置的道具",
                returns = "item",
                type = "function",
                valuetype = "item",
            },
            find_free = {
                args = "(force)boolean force 是否强制加槽",
                description = "返回一个没有放置道具的背包槽",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            is_valid_slot = {
                args = "(slot)int slot 位置",
                description = "判断是否为有效背包槽",
                returns = "boolean",
                type = "function",
                valuetype = "boolean",
            },
            max_capacity = {
                args = "()",
                description = "获取背包最大容量",
                returns = "int",
                type = "function",
                valuetype = "int",
            },
            owner = {
                args = "()",
                description = "获取背包拥有者",
                returns = "Entity",
                type = "function",
                valuetype = "Entity",
            },
            query_items = {
                args = "(cmp)function cmp 道具作为参数的过滤函数",
                description = "返回符号过滤函数的道具列表",
                returns = "table",
                type = "function",
                valuetype = "table",
            },
            remove_item = {
                args = "(slot)int slot 背包槽",
                description = "移除背包对应背包槽位的道具并返回从背包中移除的道具实例",
                returns = "item",
                type = "function",
                valuetype = "item",
            },
            set_capacity = {
                args = "(capacity)int capacity 容量",
                description = "设置背包容量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            set_max_capacity = {
                args = "(capacity)int capacity 容量",
                description = "设置最大容量",
                returns = "",
                type = "function",
                valuetype = "",
            },
            type = {
                args = "()",
                description = "获取背包容器类型",
                returns = "Define.TRAY_TYPE",
                type = "function",
                valuetype = "Define.TRAY_TYPE",
            },
        },
        type = "class",
    },
}