#version 100

uniform sampler2D texSampler;
uniform sampler2D maskSampler;
uniform sampler2D normSampler;
uniform sampler2D aoSampler;
uniform sampler2D sphSampler;
uniform mediump vec4 naturalColor;
uniform mediump vec4 customColor;
uniform mediump vec3 viewPos;

varying mediump vec4 color;
varying mediump vec4 worldPos;
varying mediump vec3 normal;
varying mediump vec2 texCoord;
varying mediump vec3 vMainLightDir;
varying mediump vec4 vMainLightColor;

#ifndef NEW_FOG
varying mediump vec4 oFogColor;
#else
uniform mediump vec4 fogParam[3];

mediump float LinearizeDepth(mediump float depth, mediump float near, mediump float far) 
{
    mediump float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

mediump float ComputeFog(mediump float z, mediump float w, mediump float density, mediump float near, mediump float far, mediump float min, mediump vec4 notUse)
{
	const mediump float LOG2 = 1.442695;
	mediump float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif

mediump vec2 dirToUV(in mediump vec3 dir) 
{
	//return clamp(vec2(0.5*(1.0 + atan(dir.x,dir.z) / 3.1415926), acos(-dir.y) / 3.1415926), 0.0, 1.0);
	return clamp(vec2(0.5*(1.0 + atan(dir.x,dir.y) / 3.1415926), acos(dir.z) / 3.1415926), 0.0, 1.0);
}

void main(void)
{
	mediump vec4 textureColor = texture2D(texSampler, texCoord);
	mediump vec4 maskColor = texture2D(maskSampler, texCoord);
	//mediump vec4 normColor = texture2D(normSampler, texCoord);
	mediump vec4 aoColor = texture2D(aoSampler, texCoord);
	mediump vec4 sphColor = texture2D(sphSampler, texCoord);
	

	
	if(textureColor.a < 0.3)
	{
		textureColor = textureColor * (1.0 - customColor.w) + customColor * customColor.w;
		textureColor.w = 1.0;
	}

	mediump vec4 finalColor = textureColor * color;
	if(naturalColor.x < 1.0 || naturalColor.y < 1.0 || naturalColor.z < 1.0)
	{
		textureColor.w = finalColor.r * 0.299 + finalColor.g * 0.587 + finalColor.b * 0.114;
		finalColor = naturalColor * textureColor.w;
	}
	
	finalColor.rgb = vec3(pow(finalColor.r,1.0+aoColor.r),pow(finalColor.g,1.0+aoColor.r),pow(finalColor.b,1.0+aoColor.r));
	//finalColor.rgb += aoColor.rgb*0.2;
	//finalColor.rgb *= 0.01;
	
	mediump vec3 norm = normalize(normal);
	mediump vec3 lightDir = normalize(vMainLightDir);
	mediump vec3 lightColor = vMainLightColor.rgb;
	mediump float diff = max(dot(norm, lightDir), 0.0);
	mediump vec3 diffuse = lightColor * 0.002;	
	
	mediump float specularStrength = 1.5;
	mediump vec3 viewDir = normalize(viewPos - worldPos.xyz);
	mediump vec3 reflectDir = reflect(-lightDir, norm);
	mediump float spec = pow(max(dot(viewDir, reflectDir), 0.0), sphColor.x * 128.0);
	mediump vec3 specular = specularStrength * spec * lightColor;
	
	finalColor.rgb += diffuse+specular;
	
	mediump float edge = pow(1.0 - abs(dot(viewDir, norm)), 3.0); 
	//finalColor.rgb *= 0.001;
	finalColor.rgb += lightColor*edge;
	
	finalColor.rgb += maskColor.rgb*0.0001;
	
	mediump vec4 normColor = texture2D(normSampler, dirToUV(-reflectDir));
	
	//finalColor.rgb += normColor.rgb*0.2;
	finalColor.rgb = mix(finalColor.rgb, normColor.rgb,0.2);
	finalColor.rgb += sphColor.rgb*0.0001;

#ifdef NEW_FOG
	mediump vec4 oFogColor =  vec4(fogParam[1].rgb, ComputeFog(gl_FragCoord.z, gl_FragCoord.w, fogParam[0].z, fogParam[0].w, fogParam[0].y, fogParam[0].w, fogParam[2]));
#endif
	
	gl_FragColor = vec4(mix(oFogColor.rgb, finalColor.rgb, oFogColor.a), finalColor.a);

}
