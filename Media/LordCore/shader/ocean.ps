#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
	precision highp float; 
#else
	precision mediump float; 
#endif

uniform lowp sampler2D waterNormalTex;
uniform lowp sampler2D foamMap;
uniform lowp samplerCube cubeMap;

uniform vec4 u_lightColor;
uniform vec3 u_lightDir;
uniform vec4 u_oceanParam;
uniform vec4 u_WaveParam;

varying vec3 normal;
varying vec4 v_fogColor;
varying highp vec4 v_tex;
varying vec3 toEyeW;
varying vec4 v_seaColor;
varying float v_depthfactor;

float FastFresnel(float NdotL, float fresnelBias, float fresnelPow)
{
	float facing = (1.0 - NdotL);
	return  max(fresnelBias + (1.0 - fresnelBias)*pow(facing, fresnelPow), 0.0);
}

vec4 ColorToLinear(vec4 color)
{
	vec4 linearColor = vec4(color.r*color.r,color.g*color.g,color.b*color.b,color.a);
	return linearColor;
}

vec4 LinearToTarget(vec4 color)
{
	vec4 c = vec4(sqrt(color.r),sqrt(color.g),sqrt(color.b),color.a);
	return c;
}

void main()
{	
	vec4 color = v_seaColor;
	vec4 tex = v_tex;
	vec3 normalB = normalize(normal);
	vec2 shift = (normalB.xz * 2.0 - vec2(1.0, 1.0)) * u_WaveParam.w;
	
	tex += vec4(shift.xy, shift*1.4);
	 // Sample normal map.
	vec3 normalT0 = texture2D(waterNormalTex, tex.xy).rgb;
	vec3 normalT1 = texture2D(waterNormalTex, tex.zw).rgb;
	
	vec3 normalN = (normalT0 + normalT1) - vec3(1.0, 1.0, 1.0);
	normalN = normalize(vec3(normalN.x, 0, normalN.y) * 0.25 + normalB);
	
	vec3 ToEyeW = normalize(toEyeW);
	vec3 r = reflect(-ToEyeW, normalN );
	vec3 reflection = textureCube(cubeMap, r).rgb;
	float fresnel = clamp(r.y, 0.0, 1.0);
	fresnel = clamp(pow(fresnel, u_oceanParam.w), 0.0, 1.0);
	color.rgb += reflection * (1.0-fresnel);
	
	vec3 RLightDir = reflect(-u_lightDir, normalN);
	float dotSpec = clamp(dot(RLightDir, ToEyeW) * 0.5 + 0.5, 0.0, 1.0);
	vec3 spec = fresnel * clamp(u_lightDir.y, 0.0, 1.0) * pow(dotSpec, 512.0)* u_lightColor.rgb * 2.0;  //pow(max(dot(RLightDir, toEyeT), 0.0f), 512);
	
	//float foamvalue = texture2D(foamMap, tex.xy * 4.0).r;	
	//float r_value = max(1.0 - color.a, 0.0);
	//vec3 foamColor = vec3(foamvalue * 1.5*r_value, 1.3, 1.0);
	//color = mix(color + spec, vec4(0.95, 0.95, 0.95, foamColor.x), min(0.95, foamColor.x)) * foamColor.yyyz;
	color.rgb = color.rgb + spec;
	color.a = color.a * (1.0 - v_depthfactor);
	
	color = ColorToLinear(color);
	color.rgb = mix(v_fogColor.rgb, color.rgb, v_fogColor.a);
	color = LinearToTarget(color);
	
	gl_FragColor = color;
}
