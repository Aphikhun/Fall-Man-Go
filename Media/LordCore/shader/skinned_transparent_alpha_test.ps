#version 100

uniform sampler2D texSampler;
uniform sampler2D texSampler_depthmap;
uniform mediump vec4 naturalColor;
uniform mediump vec4 customColor;
uniform mediump vec4 alphaColor;
uniform mediump float useSpecular;
uniform mediump float useShadow;
uniform mediump float discardAlpha;

varying mediump vec4 color;
varying mediump vec2 texCoord;
varying mediump vec4 FragPosLightSpace;
varying mediump float useOverlayColorReplaceMode;

#ifndef NEW_FOG
varying mediump vec4 oFogColor;
#else
uniform mediump vec4 fogParam[3];

mediump float LinearizeDepth(mediump float depth, mediump float near, mediump float far) 
{
    mediump float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

mediump float ComputeFog(mediump float z, mediump float w, mediump float density, mediump float near, mediump float far, mediump float min, mediump vec4 notUse)
{
	const mediump float LOG2 = 1.442695;
	mediump float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif

mediump float getShadow()
{  
  // 取得最近点的深度(使用[0,1]范围下的fragPosLight当坐标)
  mediump float closestDepth = 0.0; 
  // 取得当前片元在光源视角下的深度
  mediump float currentDepth = 0.0;
  mediump vec3 projCoords;
  mediump vec4 depthColor;

  mediump float bias = useShadow;
  mediump float shadow = 0.0;
  mediump float shadowIntensity = 0.43;

  //
  projCoords = FragPosLightSpace.xyz / FragPosLightSpace.w;
  projCoords = projCoords * 0.5 + 0.5;
  //去掉深度图外、深度摄像机外的点的阴影计算
  if(projCoords.x >= 1.0 || projCoords.x <= 0.0 || projCoords.y >= 1.0 || projCoords.y <= 0.0 || projCoords.z > 1.0)
  {
    return 0.0;
  }

  depthColor = texture2D(texSampler_depthmap, projCoords.xy);
  closestDepth = depthColor.r;
  currentDepth = projCoords.z;
  shadow = (currentDepth - bias) > closestDepth  ? shadowIntensity : 0.0;
  
  //
  mediump float d = distance(projCoords.xy, vec2(0.5, 0.5)) - 0.4;
  d = (d <= 0.0) ? 0.0 : d;
  d = (d >= 0.1) ? 0.1 : d;
  shadow = mix(shadow, 0.0, d * 10.0);

  return shadow;
}

void main(void)
{
	mediump vec4 textureColor = texture2D(texSampler, texCoord);

	if(textureColor.a < discardAlpha)
	{
		discard;
	}

	if(textureColor.a < 0.3)
	{
		textureColor = textureColor * (1.0 - customColor.w) + customColor * customColor.w;
		textureColor.w = 1.0;
	}

	mediump vec4 finalColor = (1.0 - useOverlayColorReplaceMode) * textureColor * color + useOverlayColorReplaceMode * color;
	if(naturalColor.x < 1.0 || naturalColor.y < 1.0 || naturalColor.z < 1.0)
	{
		textureColor.w = finalColor.r * 0.299 + finalColor.g * 0.587 + finalColor.b * 0.114;
		finalColor = naturalColor * textureColor.w;
	}
	finalColor.a = alphaColor.a;

	if(useShadow > 0.0 || useSpecular > 0.0)
	{
	mediump float shadow = useShadow > 0.0 ? getShadow() : 0.0;
	finalColor.rgb *= clamp((1.0-shadow), 0.0, 1.0);
	}

#ifdef NEW_FOG
	mediump vec4 oFogColor =  vec4(fogParam[1].rgb, ComputeFog(gl_FragCoord.z, gl_FragCoord.w, fogParam[0].z, fogParam[0].x, fogParam[0].y, fogParam[0].w, fogParam[2]));
#endif

	gl_FragColor = vec4(mix(oFogColor.rgb, finalColor.rgb, oFogColor.a), finalColor.a);
}

