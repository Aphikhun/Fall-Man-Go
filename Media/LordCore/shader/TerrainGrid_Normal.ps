#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
	precision highp float;
#else
	precision mediump float;
#endif

uniform sampler2D texSampler;
uniform sampler2D texSampler1;
uniform sampler2D texSampler2;
uniform sampler2D texSampler3;
uniform sampler2D LMSampler;

uniform vec4 UVScale[2];
uniform vec4 LMParam[2];
uniform vec3 camPos;

uniform vec4 ambientColor;

varying mediump vec3 Normal;
varying mediump vec4 blendines;
varying mediump vec2 texCoord;
varying mediump vec2 texCoord1;
varying mediump vec3 oWPos;

#ifndef NEW_FOG
varying mediump vec4 ofogColor;
#else
uniform mediump vec4 fogParam[3];

mediump float LinearizeDepth(mediump float depth, mediump float near, mediump float far) 
{
    mediump float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

mediump float ComputeFog(mediump float z, mediump float w, mediump float density, mediump float near, mediump float far, mediump float min, mediump vec4 notUse)
{
	const mediump float LOG2 = 1.442695;
	mediump float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif

vec4 ColorToLinear(vec4 color)
{
	vec4 linearColor = vec4(color.r*color.r,color.g*color.g,color.b*color.b,color.a);
	return linearColor;
}

vec3 ColorToLinearV3(vec3 color)
{
	vec3 linearColor = vec3(color.r*color.r,color.g*color.g,color.b*color.b);
	return linearColor;
}

vec4 LinearToTarget(vec4 color)
{
	vec4 c = vec4(sqrt(color.r),sqrt(color.g),sqrt(color.b),color.a);
	return c;
}

void main()
{
	vec4 finalColor =  texture2D(texSampler,  texCoord  * UVScale[0].xy) * (1.0 - blendines.r - blendines.g - blendines.b);
	finalColor += texture2D(texSampler1, texCoord  * UVScale[0].zw) * blendines.r;
	finalColor += texture2D(texSampler2, texCoord  * UVScale[1].xy) * blendines.g;
	finalColor += texture2D(texSampler3, texCoord  * UVScale[1].zw) * blendines.b;
	
    //finalColor.rgb = finalColor.rgb * (1.0 -blendines.a) * 2.0;
	//finalColor.rgb += finalColor.rgb * ambientColor.rgb*ambientColor.a;
    //finalColor.rgb = ColorToLinearV3(finalColor.rgb);
	
	//vec3 LMColor = texture2D(LMSampler, texCoord1*LMParam[0].zw + LMParam[0].xy).rgb * LMParam[1].rgb;
	//finalColor.rgb = finalColor.rgb * LMColor;
	
#ifdef NEW_FOG
	mediump vec4 ofogColor =  vec4(fogParam[1].rgb, ComputeFog(gl_FragCoord.z, gl_FragCoord.w, fogParam[0].z, fogParam[0].x, fogParam[0].y, fogParam[0].w, fogParam[2]));
#endif

	gl_FragColor = vec4(mix(ofogColor.rgb, finalColor.rgb, ofogColor.a), 1.0);
	//gl_FragColor = LinearToTarget(gl_FragColor);
}

