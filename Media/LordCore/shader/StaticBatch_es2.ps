#version 100
uniform mediump vec3 uViewPosition; 
uniform mediump vec3 uLightDirection;
uniform mediump vec3 uLightStrength;

varying mediump vec3 ourPosition;           
varying mediump vec4 ourTexcoord;                   // xy纹理坐标:  zw:图集上的图层
varying mediump vec3 ourNormal;             
varying mediump vec4 ourColor;     
varying mediump vec4 ourLightSpacePos;         

uniform mediump vec2 uInvTextureSize;            // 1.f / 图集大小   
uniform mediump vec2 uMaterilaLayerScale;        // 一个图集的大小
uniform sampler2D uMaterialLayerTexture;         // 图集

mediump vec3 SamplerMaterialLayerTexture(mediump vec4 texcoord) 
{
    mediump vec2 uv = fract(texcoord.xy) * uMaterilaLayerScale;     
    uv = clamp(uv - 2.0 * uInvTextureSize, vec2(0.0, 0.0), uMaterilaLayerScale);
    uv += texcoord.zw;
    uv += uInvTextureSize;
    return texture2D(uMaterialLayerTexture, uv).xyz;   
}

const mediump vec3 kAmbientStrength = vec3(0.6, 0.6, 0.6);
void main()
{
    mediump vec3 L = uLightDirection;
    mediump vec3 N = normalize(ourNormal);
    mediump vec3 V = normalize(uViewPosition - ourPosition);
    mediump vec3 H = normalize(V + L);
    mediump vec3 albedo = SamplerMaterialLayerTexture(ourTexcoord) * ourColor.rgb;
    
    mediump vec3 ambient = kAmbientStrength * albedo;
	
    mediump float NdotL  = max(dot(N, L), 0.0);
    mediump vec3 diffuse = albedo * NdotL * uLightStrength;
    
    mediump float NdotH   = max(dot(N, H), 0.0);
    mediump vec3 specular = albedo * uLightStrength * pow(NdotH, 32.0);

    mediump vec3 result = ambient + diffuse + specular; 
    gl_FragColor = vec4(result, 1.0);
}
