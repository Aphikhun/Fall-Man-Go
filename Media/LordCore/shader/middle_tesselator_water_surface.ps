#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
	precision highp float; 
#else
	precision mediump float; 
#endif

uniform lowp sampler2D waterNormalTex;
uniform lowp samplerCube cubeMap;
uniform vec2 u_waveMovement;
uniform vec4 waterColor;

varying vec3 normal;
varying vec3 toEyeW;
varying highp vec4 v_tex;

#ifndef NEW_FOG
varying vec4 oFogColor;
#else
uniform vec4 fogParam[3];

float LinearizeDepth(float depth, float near, float far) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

float ComputeFog(float z, float w, float density, float near, float far, float min, vec4 notUse)
{
	const float LOG2 = 1.442695;
	float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif

void main()
{
	vec4 color = waterColor;
    vec4 tex = v_tex + u_waveMovement.xyxy;

    vec3 normalT0 = texture2D(waterNormalTex, tex.xy).rgb;
    vec3 normalT1 = texture2D(waterNormalTex, tex.zw).rgb;
	vec3 normalN = (normalT0 + normalT1) - vec3(1.0, 1.0, 1.0);
    normalN = normalize(vec3(normalN.x, 0, normalN.y) * 0.25 + normal);

    vec3 r = reflect(-toEyeW, normalN);
    vec3 reflection = textureCube(cubeMap, r).rgb;
    float fresnel = clamp(r.y, 0.0, 1.0);
    color.rgb += reflection * (1.0-fresnel);

#ifdef NEW_FOG
	vec4 oFogColor =  vec4(fogParam[1].rgb, ComputeFog(gl_FragCoord.z, gl_FragCoord.w, fogParam[0].z, fogParam[0].x, fogParam[0].y, fogParam[0].w, fogParam[2]));
#endif

    color.rgb = mix(oFogColor.rgb, color.rgb * 0.5, oFogColor.a);

	gl_FragColor = color;
}
