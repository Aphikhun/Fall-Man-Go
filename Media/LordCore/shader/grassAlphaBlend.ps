#version 300 es
#ifdef GL_FRAGMENT_PRECISION_HIGH
	precision highp float; 
#else
	precision mediump float; 
#endif

uniform sampler2D texSampler;

in mediump vec2 texCoord;
in mediump vec4	verColor;
in mediump vec4 fogColor;
in mediump vec3	transColor;

layout(location = 0) out mediump vec4 outColor;

#ifndef NEW_FOG
in mediump vec4 fogColor;
#else
uniform mediump vec4 fogParam[3];

mediump float LinearizeDepth(mediump float depth, mediump float near, mediump float far) 
{
    mediump float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

mediump float ComputeFog(mediump float z, mediump float w, mediump float density, mediump float near, mediump float far, mediump float min, mediump vec4 notUse)
{
	const mediump float LOG2 = 1.442695;
	mediump float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif

mediump vec4 ColorToLinear(mediump vec4 color)
{
	mediump vec4 linearColor = vec4(color.x*color.x,color.y*color.y,color.z*color.z,color.w);
	return linearColor;
}

mediump vec4 LinearToTarget(mediump vec4 color)
{
	mediump vec4 c = vec4(sqrt(color.x),sqrt(color.y),sqrt(color.z),color.w);
	return c;
}

void main(void)
{
	mediump vec4 textureColor = texture(texSampler, texCoord);
	textureColor = ColorToLinear(textureColor);

	textureColor.rgb = (textureColor.rgb + transColor*textureColor.rgb) * (verColor.rgb * verColor.a * 8.0 + 0.5) * 0.5;

#ifdef NEW_FOG
	mediump vec4 fogColor =  vec4(fogParam[1].rgb, ComputeFog(gl_FragCoord.z, gl_FragCoord.w, fogParam[0].z, fogParam[0].x, fogParam[0].y, fogParam[0].w, fogParam[2]));
#endif

	mediump vec4 color = vec4(mix(fogColor.rgb, textureColor.rgb, fogColor.a), textureColor.w);
	outColor = LinearToTarget(color);
}