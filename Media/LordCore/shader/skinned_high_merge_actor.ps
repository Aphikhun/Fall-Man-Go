#version 300 es

precision mediump float;

#include "headers/basic.glsl"
#include "headers/lighting.glsl"
#include "headers/fog.glsl"

in float useOverlayColorReplaceMode;
in float meshIndex;

uniform int useOriginalcolor;
uniform vec4 customColor;
uniform vec4 alphaColor;
uniform vec4 naturalColorArray[20];
uniform vec4 customColorArray[20];

out vec4 fragColor;

vec4 getLightMap() 
{
	return vec4(0.0);
}

void main(void)
{
	int meshIndexi = int(meshIndex);
	mediump vec4 textureColor = texture(texSampler, texCoord);

	mediump vec4 finalColor;
	mediump vec4 color = vec4(1.0);

	if (useOriginalcolor > 0)
	{
		finalColor = (1.0 - useOverlayColorReplaceMode) * textureColor * color + useOverlayColorReplaceMode * color;
	}
	else
	{
		if (textureColor.a < 0.3)
		{
			textureColor = textureColor * (1.0 - customColorArray[meshIndexi].w) + customColorArray[meshIndexi] * customColorArray[meshIndexi].w;
			textureColor.w = 1.0;
		}

		finalColor = (1.0 - useOverlayColorReplaceMode) * textureColor * color + useOverlayColorReplaceMode * color;
		if(naturalColorArray[meshIndexi].x < 1.0 || naturalColorArray[meshIndexi].y < 1.0 || naturalColorArray[meshIndexi].z < 1.0)
		{
			textureColor.w = finalColor.r * 0.299 + finalColor.g * 0.587 + finalColor.b * 0.114;
			finalColor = naturalColorArray[meshIndexi] * textureColor.w;
		}
	}
	finalColor.a = alphaColor.a;

	vec3 pixelColor = CalcPixelLight(vec3(worldNormal), vec3(worldPos), finalColor);
	finalColor = vec4(pixelColor, 1.0);

	mediump vec4 oFogColor = CalcFogColor();
	fragColor = vec4(mix(oFogColor.rgb, finalColor.rgb, oFogColor.a), finalColor.a);
}
