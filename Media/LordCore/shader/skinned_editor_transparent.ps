#version 100

uniform sampler2D texSampler;
uniform sampler2D texSampler_depthmap;
uniform mediump vec4 naturalColor;
uniform mediump vec4 customColor;
uniform mediump vec4 alphaColor;
uniform mediump float useSpecular;
uniform mediump float useShadow;
uniform mediump float discardAlpha;

varying mediump vec4 color;
varying mediump vec2 texCoord;
varying mediump float useOverlayColorReplaceMode;

#ifndef NEW_FOG
varying mediump vec4 oFogColor;
#else
uniform mediump vec4 fogParam[3];

mediump float LinearizeDepth(mediump float depth, mediump float near, mediump float far) 
{
    mediump float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}

mediump float ComputeFog(mediump float z, mediump float w, mediump float density, mediump float near, mediump float far, mediump float min, mediump vec4 notUse)
{
	const mediump float LOG2 = 1.442695;
	mediump float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif


void main(void)
{
	mediump vec4 textureColor = texture2D(texSampler, texCoord);

	if(textureColor.a < 0.3)
	{
		textureColor = textureColor * (1.0 - customColor.w) + customColor * customColor.w;
		textureColor.w = 1.0;
	}

	mediump vec4 finalColor = (1.0 - useOverlayColorReplaceMode) * textureColor * color + useOverlayColorReplaceMode * color;
	if(naturalColor.x < 1.0 || naturalColor.y < 1.0 || naturalColor.z < 1.0)
	{
		textureColor.w = finalColor.r * 0.299 + finalColor.g * 0.587 + finalColor.b * 0.114;
		finalColor = naturalColor ;//* textureColor.w;
	}
	finalColor.a = alphaColor.a;

	gl_FragColor = vec4(finalColor.rgb, finalColor.a);
}

