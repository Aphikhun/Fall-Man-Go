#version 300 es

//#define BAKE_LIGHT

precision mediump float;

#include "headers/math/matrix.glsl"												// 教程版会用到
#include "headers/lighting.glsl"
#include "headers/shadow.glsl"
#include "headers/fog.glsl"

uniform float discardAlpha;
uniform int useOriginalcolor;
uniform vec4 naturalColor;
uniform vec4 customColor;
uniform int isUiActor;
uniform int useEdge;
uniform vec4 edgeColor;


////////////////////////////////////////////////////
//part的参数
uniform mediump vec3 uvParam;
uniform mediump float alpha;
uniform mediump float subMeshAlpha;
uniform mediump vec4 subMeshColor;
uniform mediump vec3 subMeshUVParam;
uniform mediump vec3 subMeshOffsetParam;
uniform mediump float isSubMesh;
uniform mediump float customThreshold;
uniform mediump float useGPUInstance;
in mediump vec4 gpuinstanceColor;
uniform mediump vec4 multiCalColor;
////////////////////////////////////////////////////


float m_useOverlayColorReplaceMode;
int m_useReflect;
int m_useReflectMaskTexture;
float m_reflectMask;
int m_useOriginalcolor;
int m_useEdge;


in mediump vec2 lightMapUV;
uniform sampler2D lightMap;
uniform mediump vec2 bakeScale;
uniform mediump vec2 bakeOffset;
uniform mediump float useBakePointLight;
uniform mediump float bakeShadowIntensity;
uniform mediump float ignoreMainLight;


mediump vec4 getLightMap()
{
	mediump vec2 uv = lightMapUV * bakeScale + bakeOffset;
	return vec4(texture(lightMap, uv).rgba);
}

out vec4 fragColor;

void main(void)
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	mediump float fSubMesh = step(0.0, isSubMesh);
	mediump vec2 coord = (1.0 - fSubMesh) * (texCoord * uvParam.xy) + fSubMesh * ((texCoord + subMeshOffsetParam.xy) * subMeshUVParam.xy);
	mediump vec4 color = vec4(multiCalColor.rgb, 1.0);
	mediump float useOverlayColorReplaceMode = multiCalColor.a;

	mediump vec4 textureColor = texture(texSampler, coord);
	mediump float textureAlpha = textureColor.a;

	if (textureColor.a < discardAlpha)
	{
		discard;
	}

	mediump vec4 realColor = (useGPUInstance > 0.9 ? gpuinstanceColor : customColor);
	mediump float fAlpha = step(textureColor.a, 0.3);
	textureColor.rgb = (1.0 - fAlpha) * textureColor.rgb + fAlpha * (textureColor.rgb * (1.0 - realColor.a) + realColor.rgb * realColor.a);
	textureColor.a = (1.0 - fAlpha) * textureColor.a + fAlpha;

	mediump vec4 finalColor = (1.0 - useOverlayColorReplaceMode) * textureColor * color + useOverlayColorReplaceMode * color;
	mediump float fNature = dot(max(sign(vec3(1.0) - naturalColor.rgb), 0.0), vec3(1.0));
	fNature = sign(fNature);
	textureColor.a = (1.0 - fNature) * textureColor.a + fNature * (finalColor.r * 0.299 + finalColor.g * 0.587 + finalColor.b * 0.114);
	finalColor = (1.0 - fNature) * finalColor + fNature * naturalColor * textureColor.a;

	finalColor.a *= (1.0 - fSubMesh) * alpha + fSubMesh * subMeshAlpha;

	mediump vec4 c0 = vec4(textureColor.rgb * realColor.rgb, finalColor.a);
	mediump vec4 c1 = vec4(textureColor.rgb, finalColor.a);
	mediump vec4 c2 = vec4(textureColor.rgb * subMeshColor.rgb, finalColor.a);
	mediump float fCustom = step(textureAlpha, customThreshold);
	finalColor = fCustom * c0 + (1.0 - fCustom) * c1;
	finalColor = (1.0 - fSubMesh) * finalColor + fSubMesh * c2;
	// finalColor = vec4(1.0, 0.0, 0.0, 1.0);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Lighting
	vec3 pixelColor = CalcPixelLight(vec3(worldNormal), vec3(worldPos), finalColor, ignoreMainLight, useBakePointLight, bakeShadowIntensity);

	// Fog
	mediump vec4 oFogColor = CalcFogColor();
	fragColor = vec4(mix(oFogColor.rgb, pixelColor, oFogColor.a), alpha * textureAlpha);//finalColor.a
	// fragColor = vec4(pixelColor, alpha * textureAlpha);
}

